"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _utils = require("./utils");

var _dnsPacket = _interopRequireDefault(require("dns-packet"));

function deployNameWrapper(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {
  return _deployNameWrapper.apply(this, arguments);
}

function _deployNameWrapper() {
  _deployNameWrapper = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(web3, accounts, newEns, newEnsContract, newBaseRegistrar, newBaseRegistrarContract, newControllerContract, nameLogger) {
    var namehash, encodeName, sha3, staticMetadataServiceJSON, staticMetadataService, nameWrapperJSON, nameWrapper, nameWrapperContract, resolverJSON, resolverWithNameWrapper, owner1, expiredDomainDurationDays, wrappedOwner, wrappedSubOnwer, expiredWrappedDomainOwner, expiredwrappedOwner;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;

            namehash = function namehash(name) {
              var node = '0x0000000000000000000000000000000000000000000000000000000000000000';

              if (name !== '') {
                var labels = name.split('.');

                for (var i = labels.length - 1; i >= 0; i--) {
                  node = sha3(node + sha3(labels[i]).slice(2), {
                    encoding: 'hex'
                  });
                }
              }

              return node.toString();
            };

            encodeName = function encodeName(name) {
              return '0x' + _dnsPacket["default"].name.encode(name).toString('hex');
            };

            sha3 = web3.utils.sha3;
            staticMetadataServiceJSON = (0, _utils.loadContract)('wrapper', 'StaticMetadataService');
            _context.next = 7;
            return (0, _utils.deploy)(web3, accounts[0], staticMetadataServiceJSON, 'http://localhost:8080/name/0x{id}');

          case 7:
            staticMetadataService = _context.sent;
            nameWrapperJSON = (0, _utils.loadContract)('wrapper', 'NameWrapper');
            _context.next = 11;
            return (0, _utils.deploy)(web3, accounts[0], nameWrapperJSON, newEns._address, newBaseRegistrar._address, staticMetadataService._address);

          case 11:
            nameWrapper = _context.sent;
            nameWrapperContract = nameWrapper.methods;
            _context.next = 15;
            return nameWrapperContract.setController(accounts[0], true).send({
              from: accounts[0]
            });

          case 15:
            resolverJSON = (0, _utils.loadContract)('resolvers', 'PublicResolver');
            _context.next = 18;
            return (0, _utils.deploy)(web3, accounts[0], resolverJSON, newEns._address, nameWrapper._address);

          case 18:
            resolverWithNameWrapper = _context.sent;
            console.log('setting namewrapper approval for registrar and registry');
            _context.next = 22;
            return newBaseRegistrarContract.setApprovalForAll(nameWrapper._address, true).send({
              from: accounts[0]
            });

          case 22:
            _context.next = 24;
            return newEnsContract.setApprovalForAll(nameWrapper._address, true).send({
              from: accounts[0]
            });

          case 24:
            _context.next = 26;
            return (0, _utils.registerName)(web3, accounts[0], newControllerContract, 'wrappedname', 365 * _utils.DAYS * 5);

          case 26:
            console.log('addint to name logger');
            nameLogger.record('wrappedname.eth', {
              label: 'wrappedname'
            });
            console.log('asserting results');
            _context.next = 31;
            return newEnsContract.owner(namehash('wrappedname.eth')).call();

          case 31:
            owner1 = _context.sent;
            console.log(owner1); // assert((await newEnsContract.owner(namehash('wrappedname.eth')).call()) === accounts[0], 'check owner of wrappedname.eth');

            /** 
            * @name subdomain.wrappedname.eth
            * @desc mock data for a properly wrapped subdomain
            */

            console.log('registering subdomain.wrappedname.eth');
            _context.next = 36;
            return newEnsContract.setSubnodeOwner(namehash('wrappedname.eth'), sha3('subdomain'), accounts[0]).send({
              from: accounts[0],
              gas: 6700000
            });

          case 36:
            nameLogger.record('subdomain.wrappedname.eth', {
              label: 'subdomain.wrappedname.eth'
            }); //  assert((await newEnsContract.owner(namehash('subdomain.wrappedname.eth')).call()) === accounts[0], 'check owner of subdomain')

            /**
                 * @name unwrapped.wrappedname.eth
                 * @desc mock data for a subdomain that is not wrapped while the parent domain is.
                 */

            console.log('register unwrapped.wrapped.eth');
            _context.next = 40;
            return newEnsContract.setSubnodeOwner(namehash('wrappedname.eth'), sha3('unwrapped'), accounts[0]).send({
              from: accounts[0]
            });

          case 40:
            nameLogger.record('unwrapped.wrappedname.eth', {
              label: 'unwrapped.wrappedname.eth'
            }); //   assert((await newEnsContract.owner(namehash('unwrapped.wrappedname.eth')).call()) === accounts[0], 'check owner of subdomain')

            /**
            * @name expiredwrappedname.eth
            * @desc mock data for a domain that was wrapped but expired and repurchased
            */

            expiredDomainDurationDays = 60;
            _context.next = 44;
            return (0, _utils.registerName)(web3, accounts[0], newControllerContract, 'expiredwrappedname', expiredDomainDurationDays * _utils.DAYS);

          case 44:
            nameLogger.record('expiredwrappedname.eth', {
              label: 'expiredwrappedname'
            }); //  assert((await newEnsContract.owner(namehash('expiredwrappedname.eth')).call()) === accounts[0], 'check owner of expiredwrappedname.eth');
            // Setting up wrappedname.eth

            console.log('wrapping wrappedname');
            _context.next = 48;
            return nameWrapperContract.wrapETH2LD('wrappedname', accounts[0], 0, resolverWithNameWrapper._address).send({
              from: accounts[0],
              gas: 6700000
            });

          case 48:
            console.log('asserting ownership');
            _context.next = 51;
            return nameWrapperContract.ownerOf(namehash('wrappedname.eth')).call();

          case 51:
            wrappedOwner = _context.sent;
            // assert(wrappedOwner === accounts[0], 'wrappedname.eth is owned by accounts[0]');
            // assert((await newEnsContract.owner(namehash('expiredwrappedname.eth')).call()) === accounts[0], 'check owner of expiredwrappedname.eth');
            // Setting up subdomain.wrappedname.eth
            console.log('wrapping subdomain.wrappedname');
            _context.next = 55;
            return nameWrapperContract.wrap(encodeName('subdomain.wrappedname.eth'), accounts[0], 0, resolverWithNameWrapper._address).send({
              from: accounts[0],
              gas: 6700000
            });

          case 55:
            console.log('asserting owenership of subdomain.wrappendname.eth');
            _context.next = 58;
            return nameWrapperContract.ownerOf(namehash('subdomain.wrappedname.eth')).call();

          case 58:
            wrappedSubOnwer = _context.sent;
            // assert(wrappedSubOnwer === accounts[0], 'subdomain.wrappedname.eth is owned by accounts[0]')
            // Setting up expiredwrappedname.eth
            console.log('wrapping expiredwrappedname');
            _context.next = 62;
            return nameWrapperContract.wrapETH2LD('expiredwrappedname', accounts[0], 0, resolverWithNameWrapper._address).send({
              from: accounts[0],
              gas: 6700000
            });

          case 62:
            _context.next = 64;
            return (0, _utils.advanceTime)(web3, (6 * 31 + expiredDomainDurationDays) * _utils.DAYS);

          case 64:
            _context.next = 66;
            return (0, _utils.mine)(web3);

          case 66:
            _context.next = 68;
            return (0, _utils.registerName)(web3, accounts[0], newControllerContract, 'expiredwrappedname');

          case 68:
            console.log('asserting ownership');
            _context.next = 71;
            return newEnsContract.owner(namehash('expiredwrappedname.eth')).call();

          case 71:
            expiredWrappedDomainOwner = _context.sent;
            //  assert(expiredWrappedDomainOwner === accounts[0], 'expiredwrappedname.eth is ownned by accounts[0]')
            console.log('asserting namewrapper ownership');
            _context.next = 75;
            return nameWrapperContract.ownerOf(namehash('expiredwrappedname.eth')).call();

          case 75:
            expiredwrappedOwner = _context.sent;
            return _context.abrupt("return", {
              nameWrapperAddress: nameWrapper._address
            });

          case 79:
            _context.prev = 79;
            _context.t0 = _context["catch"](0);
            console.log('Failed to register wrapped name');
            console.log('ERROR', _context.t0);
            process.exit();

          case 84:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 79]]);
  }));
  return _deployNameWrapper.apply(this, arguments);
}

var _default = deployNameWrapper;
exports["default"] = _default;