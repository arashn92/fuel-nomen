#!/usr/bin/env node
var vt=Object.defineProperty;var Dt=(s,t,e)=>t in s?vt(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e;var p=(s,t,e)=>(Dt(s,typeof t!="symbol"?t+"":t,e),e);import{versions as me}from"@fuel-ts/versions";import{Command as ue,Option as lt}from"commander";import{hexlify as ne}from"@ethersproject/bytes";import{existsSync as ie,readFileSync as Mt,writeFileSync as se}from"fs";import{sync as oe}from"glob";import pe from"mkdirp";import{basename as ae}from"path";import ce from"rimraf";import Vt from"lodash.upperfirst";function ft(s){let e=[r=>r.replace(/\s+/g,"-"),r=>r.replace(/\./g,"-"),r=>r.replace(/_/g,"-"),r=>r.replace(/-[a-z]/g,n=>n.slice(-1).toUpperCase()),r=>r.replace(/-/g,""),r=>r.replace(/^\d+/,""),r=>Vt(r)].reduce((r,n)=>n(r),s);if(e==="")throw new Error(`Can't guess class name, please rename file: ${s}`);return e}function g(s){let{types:t,typeId:e}=s,r=t.find(({rawAbiType:{typeId:n}})=>n===e);if(!r)throw new Error(`Type ID not found: ${e}.`);return r.parseComponentsAttributes({types:t}),r}function h(s){let{types:t,typeArguments:e,parentTypeId:r,target:n}=s,o=`${n}Label`,i=[],a,u;r!==void 0&&(a=g({types:t,typeId:r}),u=a.attributes[o]),e.forEach(l=>{let T,I=l.type;try{T=g({types:t,typeId:I}).attributes[o]}catch{T="void"}if(l.typeArguments){let f=h({types:t,target:n,parentTypeId:l.type,typeArguments:l.typeArguments});i.push(f)}else i.push(`${T}`)});let y=i.join(", ");return u&&(y=`${u}<${y}>`),y}var J=class{name;types;rawAbiFunction;attributes;constructor(t){this.rawAbiFunction=t.rawAbiFunction,this.types=t.types,this.name=t.rawAbiFunction.name,this.attributes={inputs:this.bundleInputTypes(),output:this.bundleOutputTypes(),prefixedInputs:this.bundleInputTypes(!0)}}bundleInputTypes(t=!1){let{types:e}=this;return this.rawAbiFunction.inputs.map(n=>{let{name:o,type:i,typeArguments:a}=n,u=g({types:e,typeId:i}),y;return a?y=h({types:e,target:"input",parentTypeId:i,typeArguments:a}):y=u.attributes.inputLabel,t?`${o}: ${y}`:y}).join(", ")}bundleOutputTypes(){return h({types:this.types,target:"output",typeArguments:[this.rawAbiFunction.output]})}getDeclaration(){let{name:t}=this,{prefixedInputs:e,output:r}=this.attributes;return`${t}: InvokeFunction<[${e}], ${r}>`}};function bt(s){let{types:t,rawAbiFunction:e}=s;return new J({types:t,rawAbiFunction:e})}function Tt(s){let{types:t,rawAbiFunctions:e}=s;return e.map(n=>bt({types:t,rawAbiFunction:n}))}var d=class{rawAbiType;attributes;requireImportFromFuels;constructor(t){this.rawAbiType=t.rawAbiType,this.attributes={inputLabel:"unknown",outputLabel:"unknown"},this.requireImportFromFuels=!1}};var K=class extends d{name="array";static isSuitableFor(t){return K.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){var y,l;let{types:e}=t,{type:r}=this.rawAbiType,n=Number((y=r.match(K.MATCH_REGEX))==null?void 0:y[1]),o=[],i=[];(l=this.rawAbiType.components)==null||l.forEach(T=>{let{type:I,typeArguments:f}=T;if(f){let b=h({types:e,typeArguments:f,parentTypeId:I,target:"input"}),E=h({types:e,typeArguments:f,parentTypeId:I,target:"output"});o.push(b),i.push(E)}else{let{attributes:b}=g({types:e,typeId:I});o.push(b.inputLabel),i.push(b.outputLabel)}});let a=Array(n).fill(o[0]).join(", "),u=Array(n).fill(i[0]).join(", ");return this.attributes={inputLabel:`[${a}]`,outputLabel:`[${u}]`},this.attributes}},w=K;p(w,"swayType","[_; 2]"),p(w,"MATCH_REGEX",/^\[_; ([0-9]+)\]$/m);var rt=class extends d{name="str";static isSuitableFor(t){return rt.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes={inputLabel:"string",outputLabel:"string"},this.attributes}},F=rt;p(F,"swayType","str[3]"),p(F,"MATCH_REGEX",/^str\[(.+)\]$/m);var nt=class extends F{name="b256";static isSuitableFor(t){return nt.MATCH_REGEX.test(t.type)}},R=nt;p(R,"swayType","b256"),p(R,"MATCH_REGEX",/^b256$/m);var it=class extends R{name="b512";static isSuitableFor(t){return it.MATCH_REGEX.test(t.type)}},$=it;p($,"swayType","struct B512"),p($,"MATCH_REGEX",/^struct B512$/m);var st=class extends d{name="bool";static isSuitableFor(t){return st.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes={inputLabel:"boolean",outputLabel:"boolean"},this.attributes}},O=st;p(O,"swayType","bool"),p(O,"MATCH_REGEX",/^bool$/m);function L(s){var n;let{rawAbiType:t,regex:e}=s,r=(n=t.type.match(s.regex))==null?void 0:n[1];if(!r){let o=`Couldn't extract struct name with: '${e}'.

`;throw o+=`Check your JSON ABI.

[source]
`,o+=`${JSON.stringify(t,null,2)}`,new Error(o)}return r}var k=class extends d{name="enum";static isSuitableFor(t){let e=k.MATCH_REGEX.test(t.type),r=k.IGNORE_REGEX.test(t.type);return e&&!r}parseComponentsAttributes(t){let e=this.getStructName();return this.attributes={structName:e,inputLabel:`${e}Input`,outputLabel:`${e}Output`},this.attributes}getStructName(){return L({rawAbiType:this.rawAbiType,regex:k.MATCH_REGEX})}getStructContents(t){let{types:e,target:r}=t,{components:n}=this.rawAbiType,o=n,i=`${r}Label`;return o.map(u=>{let{name:y,type:l}=u;if(l===0)return`${y}: []`;let{attributes:T}=g({types:e,typeId:l});return`${y}: ${T[i]}`}).join(", ")}},N=k;p(N,"swayType","enum MyEnumName"),p(N,"MATCH_REGEX",/^enum (.+)$/m),p(N,"IGNORE_REGEX",/^enum Option$/m);var Y=class extends d{name="generic";static isSuitableFor(t){return Y.MATCH_REGEX.test(t.type)}getStructName(){return L({rawAbiType:this.rawAbiType,regex:Y.MATCH_REGEX})}parseComponentsAttributes(t){let e=this.getStructName();return this.attributes={inputLabel:e,outputLabel:e},this.attributes}},G=Y;p(G,"swayType","generic T"),p(G,"MATCH_REGEX",/^generic ([^\s]+)$/m);var ot=class extends d{name="option";static isSuitableFor(t){return ot.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes={inputLabel:"Option",outputLabel:"Option"},this.attributes}},P=ot;p(P,"swayType","enum Option"),p(P,"MATCH_REGEX",/^enum Option$/m);var pt=class extends d{name="u8";constructor(t){super(t),this.attributes={inputLabel:"BigNumberish",outputLabel:"number"},this.requireImportFromFuels=!0}static isSuitableFor(t){return pt.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes}},A=pt;p(A,"swayType","u8"),p(A,"MATCH_REGEX",/^u8$/m);var at=class extends A{name="u64";parseComponentsAttributes(t){return this.attributes={inputLabel:"BigNumberish",outputLabel:"BN"},this.attributes}static isSuitableFor(t){return at.MATCH_REGEX.test(t.type)}},C=at;p(C,"swayType","u64"),p(C,"MATCH_REGEX",/^u64$/m);var ct=class extends C{name="rawUntypedPtr";static isSuitableFor(t){return ct.MATCH_REGEX.test(t.type)}},M=ct;p(M,"swayType","raw untyped ptr"),p(M,"MATCH_REGEX",/^raw untyped ptr$/m);var j=class extends d{name="struct";static isSuitableFor(t){let e=j.MATCH_REGEX.test(t.type),r=j.IGNORE_REGEX.test(t.type);return e&&!r}parseComponentsAttributes(t){let e=this.getStructName();return this.attributes={structName:e,inputLabel:`${e}Input`,outputLabel:`${e}Output`},this.attributes}getStructName(){return L({rawAbiType:this.rawAbiType,regex:j.MATCH_REGEX})}getStructContents(t){let{types:e,target:r}=t,{components:n}=this.rawAbiType;return n.map(a=>{let{name:u,type:y,typeArguments:l}=a,T=g({types:e,typeId:y}),I;if(l)I=h({types:e,target:r,parentTypeId:y,typeArguments:l});else{let f=`${r}Label`;I=T.attributes[f]}return`${u}: ${I}`}).join(", ")}getStructDeclaration(t){let{types:e}=t,{typeParameters:r}=this.rawAbiType;return r?`<${r.map(i=>g({types:e,typeId:i})).map(({attributes:{inputLabel:i}})=>i).join(", ")}>`:""}},S=j;p(S,"swayType","struct MyStruct"),p(S,"MATCH_REGEX",/^struct (.+)$/m),p(S,"IGNORE_REGEX",/^struct (Vec|RawVec)$/m);var mt=class extends d{name="tupple";static isSuitableFor(t){return mt.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){var o;let{types:e}=t,r=[],n=[];return(o=this.rawAbiType.components)==null||o.forEach(i=>{let{type:a,typeArguments:u}=i;if(u){let y=h({types:e,typeArguments:u,parentTypeId:a,target:"input"}),l=h({types:e,typeArguments:u,parentTypeId:a,target:"output"});r.push(y),n.push(l)}else{let{attributes:y}=g({types:e,typeId:a});r.push(y.inputLabel),n.push(y.outputLabel)}}),this.attributes={inputLabel:`[${r.join(", ")}]`,outputLabel:`[${n.join(", ")}]`},this.attributes}},H=mt;p(H,"swayType","(_, _, _)"),p(H,"MATCH_REGEX",/^\([_,\s]+\)$/m);var ut=class extends A{name="u16";static isSuitableFor(t){return ut.MATCH_REGEX.test(t.type)}},X=ut;p(X,"swayType","u16"),p(X,"MATCH_REGEX",/^u16$/m);var yt=class extends A{name="u32";static isSuitableFor(t){return yt.MATCH_REGEX.test(t.type)}},U=yt;p(U,"swayType","u32"),p(U,"MATCH_REGEX",/^u32$/m);var Q=class extends w{name="vector";static isSuitableFor(t){let e=Q.MATCH_REGEX.test(t.type),r=Q.IGNORE_REGEX.test(t.type);return e&&!r}parseComponentsAttributes(t){return this.attributes={inputLabel:"Vec",outputLabel:"Vec"},this.attributes}},_=Q;p(_,"swayType","struct Vec"),p(_,"MATCH_REGEX",/^struct Vec/m),p(_,"IGNORE_REGEX",/^struct RawVec$/m);var dt=[w,R,$,O,N,G,P,M,F,S,H,X,U,C,A,_];function It(s){let{rawAbiType:t}=s,{type:e}=t,r=dt.find(n=>n.isSuitableFor({type:e}));if(!r)throw new Error(`Type not supported: ${e}`);return new r(s)}function gt(s){return["()","struct RawVec"].indexOf(s.type)>=0}function ht(s){let t=[];return s.rawAbiTypes.forEach(e=>{let{type:r}=e;if(!gt({type:r})){let o=It({rawAbiType:e});t.push(o)}}),t.forEach(e=>{e.parseComponentsAttributes({types:t})}),t}var W=class{name;programType;filepath;outputDir;commonTypesInUse=[];rawContents;hexlifiedBinContents;types;functions;constructor(t){let{filepath:e,outputDir:r,rawContents:n,hexlifiedBinContents:o,programType:i}=t,a=/([^/]+)-abi\.json$/m,u=e.match(a);if(!u||u.length===0)throw new Error(`Could not parse name from abi file: ${e}`);let l=`${ft(u[1])}Abi`;this.name=l,this.programType=i,this.filepath=e,this.rawContents=n,this.hexlifiedBinContents=o,this.outputDir=r;let{types:T,functions:I}=this.parse();this.types=T,this.functions=I,this.computeCommonTypesInUse()}parse(){let{types:t,functions:e}=this.rawContents,r=ht({rawAbiTypes:t}),n=Tt({rawAbiFunctions:e,types:r});return{types:r,functions:n}}computeCommonTypesInUse(){let t={option:"Option",enum:"Enum",vector:"Vec"};this.commonTypesInUse=[],Object.keys(t).forEach(e=>{if(!!this.types.find(n=>n.name===e)){let n=t[e];this.commonTypesInUse.push(n)}})}};import{join as Qt}from"path";import{versions as Bt}from"@fuel-ts/versions";import{compile as xt}from"handlebars";var At=`/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: {{FUELS}}
  Forc version: {{FORC}}
  Fuel-Core version: {{FUEL_CORE}}
*/
`;function x(s){let{data:t,template:e}=s,r={strict:!0,noEscape:!0},n=xt(e,r),o=xt(At,r);return n({...t,header:o(Bt)}).replace(/[\n]{3,}/gm,`

`)}var Et=`{{header}}

/*
  Mimics Sway Enum, requires at least one Key-Value but
  does not raise error on multiple pairs.
  This is done in the abi-coder
*/
export type Enum<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

/*
  Mimics Sway Option and Vectors.
  Vectors are treated like arrays in Typescript.
*/
export type Option<T> = T | undefined;

export type Vec<T> = T[];
`;function v(){return x({template:Et})}var wt=`{{header}}

{{#if isGeneratingContracts}}
{{#each abis}}
export type { {{name}} } from './{{name}}';
{{/each}}
{{/if}}

{{#each abis}}
export { {{name}}__factory } from './factories/{{name}}__factory';
{{/each}}
`;function D(s){let{abis:t}=s,e=t[0].programType==="contract";return x({template:wt,data:{abis:t,isGeneratingContracts:e}})}function V(s){let{types:t}=s;return{enums:t.filter(r=>r.name==="enum").map(r=>{let n=r,o=n.getStructName(),i=n.getStructContents({types:t,target:"input"}),a=n.getStructContents({types:t,target:"output"});return{structName:o,inputValues:i,outputValues:a,recycleRef:i===a}})}}import Jt from"lodash.uniq";var qt=(s,t)=>s.toLowerCase().localeCompare(t.toLowerCase());function z(s){let{types:t,baseMembers:e=[]}=s,n=t.filter(i=>i.requireImportFromFuels).map(i=>i.attributes.inputLabel),o=Jt(e.concat(n).sort(qt));return{imports:o.length?o:void 0}}function B(s){let{types:t}=s;return{structs:t.filter(r=>r.name==="struct").map(r=>{let n=r,o=n.getStructName(),i=n.getStructContents({types:t,target:"input"}),a=n.getStructContents({types:t,target:"output"}),u=n.getStructDeclaration({types:t});return{structName:o,typeAnnotations:u,inputValues:i,outputValues:a,recycleRef:i===a}})}}var Ft=`{{header}}

{{#if imports}}
import type {
{{#each imports}}
  {{this}},
{{/each}}
} from 'fuels';
{{/if}}

{{#if commonTypesInUse}}
import type { {{commonTypesInUse}} } from "./common";
{{/if}}

{{#each enums}}
export type {{structName}}Input = Enum<{ {{inputValues}} }>;
{{#if recycleRef}}
export type {{structName}}Output = {{structName}}Input;
{{else}}
export type {{structName}}Output = Enum<{ {{outputValues}} }>;
{{/if}}
{{/each}}


{{#each structs}}
export type {{structName}}Input{{typeAnnotations}} = { {{inputValues}} };
{{#if recycleRef}}
export type {{structName}}Output{{typeAnnotations}} = {{structName}}Input{{typeAnnotations}};
{{else}}
export type {{structName}}Output{{typeAnnotations}} = { {{outputValues}} };
{{/if}}
{{/each}}


interface {{capitalizedName}}Interface extends Interface {
  functions: {
    {{#each functionsFragments}}
    {{this}}: FunctionFragment;
    {{/each}}
  };

  {{#each encoders}}
  encodeFunctionData(functionFragment: '{{functionName}}', values: [{{input}}]): Uint8Array;
  {{/each}}

  {{#each decoders}}
  decodeFunctionData(functionFragment: '{{functionName}}', data: BytesLike): DecodedValue;
  {{/each}}
}


export class {{capitalizedName}} extends Contract {
  interface: {{capitalizedName}}Interface;
  functions: {
    {{#each functionsTypedefs}}
    {{this}};
    {{/each}}
  };
}
`;function Rt(s){let{name:t,types:e,functions:r,commonTypesInUse:n}=s.abi,o=r.map(f=>f.getDeclaration()),i=r.map(f=>f.name),a=r.map(f=>({functionName:f.name,input:f.attributes.inputs})),u=r.map(f=>({functionName:f.name})),{enums:y}=V({types:e}),{structs:l}=B({types:e}),{imports:T}=z({types:e,baseMembers:["Interface","FunctionFragment","DecodedValue","Contract","BytesLike","InvokeFunction","BN"]});return x({template:Ft,data:{capitalizedName:t,commonTypesInUse:n.join(", "),functionsTypedefs:o,functionsFragments:i,encoders:a,decoders:u,structs:l,enums:y,imports:T}})}var Ct=`{{header}}

import { Interface, Contract } from "fuels";
import type { Provider, Account, AbstractAddress } from "fuels";
import type { {{capitalizedName}}, {{capitalizedName}}Interface } from "../{{capitalizedName}}";

const _abi = {{abiJsonString}}

export class {{capitalizedName}}__factory {
  static readonly abi = _abi
  static createInterface(): {{capitalizedName}}Interface {
    return new Interface(_abi) as unknown as {{capitalizedName}}Interface
  }
  static connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ): {{capitalizedName}} {
    return new Contract(id, _abi, accountOrProvider) as unknown as {{capitalizedName}}
  }
}
`;function Nt(s){let{name:t,rawContents:e}=s.abi,r=JSON.stringify(e,null,2);return x({template:Ct,data:{capitalizedName:t,abiJsonString:r}})}function St(s){let{abis:t,outputDir:e}=s,r=[],n=t.find(i=>i.commonTypesInUse.length>0);t.forEach(i=>{let{name:a}=i,u=`${e}/${a}.d.ts`,y=`${e}/factories/${a}__factory.ts`,l={path:u,contents:Rt({abi:i})},T={path:y,contents:Nt({abi:i})};r.push(l),r.push(T)});let o={path:`${e}/index.ts`,contents:D({abis:t})};if(r.push(o),n){let a={path:Qt(e,"common.d.ts"),contents:v()};r.push(a)}return r}import{join as Zt}from"path";var _t=`{{header}}

{{#if imports}}
import {
{{#each imports}}
  {{this}},
{{/each}}
} from 'fuels';
{{/if}}

{{#if commonTypesInUse}}
import type { {{commonTypesInUse}} } from "./common";
{{/if}}


{{#each enums}}
export type {{structName}}Input = Enum<{ {{inputValues}} }>;
{{#if recycleRef}}
export type {{structName}}Output = {{structName}}Input;
{{else}}
export type {{structName}}Output = Enum<{ {{outputValues}} }>;
{{/if}}
{{/each}}


{{#each structs}}
export type {{structName}}Input{{typeAnnotations}} = { {{inputValues}} };
{{#if recycleRef}}
export type {{structName}}Output{{typeAnnotations}} = {{structName}}Input{{typeAnnotations}};
{{else}}
export type {{structName}}Output{{typeAnnotations}} = { {{outputValues}} };
{{/if}}
{{/each}}

type {{capitalizedName}}Inputs = [{{inputs}}];

const _abi = {{abiJsonString}}

const _bin = '{{hexlifiedBinString}}'

export class {{capitalizedName}}__factory {

  static readonly abi = _abi
  static readonly bin = _bin;

  static createInstance(provider?: Provider) {

    const { abi, bin } = {{capitalizedName}}__factory

    const predicate = new Predicate(bin, abi, provider);

    return predicate;

  }

}
`;function $t(s){let{abi:t}=s,{types:e}=t,{rawContents:r,name:n,hexlifiedBinContents:o}=s.abi,i=JSON.stringify(r,null,2),a=t.functions.find(b=>b.name==="main");if(!a)throw new Error("ABI doesn't have a 'main()' method.");let{enums:u}=V({types:e}),{structs:y}=B({types:e}),{imports:l}=z({types:e,baseMembers:["Predicate","Provider"]}),{prefixedInputs:T,output:I}=a.attributes;return x({template:_t,data:{inputs:T,output:I,structs:y,enums:u,abiJsonString:i,hexlifiedBinString:o,capitalizedName:n,imports:l}})}function Ot(s){let{abis:t,outputDir:e}=s,r=[],n=t.find(i=>i.commonTypesInUse.length>0);t.forEach(i=>{let{name:a}=i,y={path:`${e}/factories/${a}__factory.ts`,contents:$t({abi:i})};r.push(y)});let o={path:`${e}/index.ts`,contents:D({abis:t})};if(r.push(o),n){let a={path:Zt(e,"common.d.ts"),contents:v()};r.push(a)}return r}import{join as ee}from"path";var Lt=`{{header}}

{{#if imports}}
import {
{{#each imports}}
  {{this}},
{{/each}}
} from 'fuels';
{{/if}}

{{#if commonTypesInUse}}
import type { {{commonTypesInUse}} } from "./common";
{{/if}}


{{#each enums}}
export type {{structName}}Input = Enum<{ {{inputValues}} }>;
{{#if recycleRef}}
export type {{structName}}Output = {{structName}}Input;
{{else}}
export type {{structName}}Output = Enum<{ {{outputValues}} }>;
{{/if}}
{{/each}}


{{#each structs}}
export type {{structName}}Input{{typeAnnotations}} = { {{inputValues}} };
{{#if recycleRef}}
export type {{structName}}Output{{typeAnnotations}} = {{structName}}Input{{typeAnnotations}};
{{else}}
export type {{structName}}Output{{typeAnnotations}} = { {{outputValues}} };
{{/if}}
{{/each}}

type {{capitalizedName}}Inputs = [{{inputs}}];
type {{capitalizedName}}Output = {{output}};

const _abi = {{abiJsonString}}

const _bin = '{{hexlifiedBinString}}'

export class {{capitalizedName}}__factory {

  static readonly abi = _abi
  static readonly bin = _bin

  static createInstance(wallet: Account) {

    const { abi, bin } = {{capitalizedName}}__factory

    const script = new Script<
      {{capitalizedName}}Inputs,
      {{capitalizedName}}Output
    >(bin, abi, wallet);

    return script;

  }

}
`;function Gt(s){let{abi:t}=s,{types:e}=t,{rawContents:r,name:n,hexlifiedBinContents:o}=s.abi,i=JSON.stringify(r,null,2),a=t.functions.find(b=>b.name==="main");if(!a)throw new Error("ABI doesn't have a 'main()' method.");let{enums:u}=V({types:e}),{structs:y}=B({types:e}),{imports:l}=z({types:e,baseMembers:["Script","Account"]}),{prefixedInputs:T,output:I}=a.attributes;return x({template:Lt,data:{inputs:T,output:I,structs:y,enums:u,abiJsonString:i,hexlifiedBinString:o,capitalizedName:n,imports:l}})}function Pt(s){let{abis:t,outputDir:e}=s,r=[],n=t.find(i=>i.commonTypesInUse.length>0);t.forEach(i=>{let{name:a}=i,y={path:`${e}/factories/${a}__factory.ts`,contents:Gt({abi:i})};r.push(y)});let o={path:`${e}/index.ts`,contents:D({abis:t})};if(r.push(o),n){let a={path:ee(e,"common.d.ts"),contents:v()};r.push(a)}return r}import re from"lodash.upperfirst";function tt(s){let{abiFilepath:t,binFilepath:e,binExists:r,programType:n}=s,o=n==="script";if(!r&&o)throw new Error([`Could not find BIN file for counterpart ${re(n)} ABI.`,`  - ABI: ${t}`,`  - BIN: ${e}`,n].join(`
`))}var et=class{abis;abiFiles;binFiles;outputDir;files;constructor(t){let{abiFiles:e,binFiles:r,outputDir:n,programType:o}=t;this.outputDir=n,this.abiFiles=e,this.binFiles=r,this.abis=this.abiFiles.map(i=>{let a=i.path.replace("-abi.json",".bin"),u=this.binFiles.find(({path:l})=>l===a);return u||tt({abiFilepath:i.path,binExists:!!u,binFilepath:a,programType:o}),new W({filepath:i.path,rawContents:JSON.parse(i.contents),hexlifiedBinContents:u==null?void 0:u.contents,outputDir:n,programType:o})}),this.files=this.getAssembledFiles({programType:o})}getAssembledFiles(t){let{abis:e,outputDir:r}=this,{programType:n}=t;switch(n){case"contract":return St({abis:e,outputDir:r});case"script":return Pt({abis:e,outputDir:r});case"predicate":return Ot({abis:e,outputDir:r});default:throw new Error(`Invalid Typegen programType: ${n}`)}}};function Ht(s){let{cwd:t,inputs:e,output:r,silent:n,programType:o,filepaths:i}=s,a=ae(t),{log:u}=console;n&&(u=()=>({}));let y=[];if(!(i!=null&&i.length)&&(e==null?void 0:e.length))y=e.flatMap(b=>oe(b,{cwd:t}));else if(i!=null&&i.length)y=i;else throw new Error("You need to inform at least one parameter: `input` or `filepaths`");let l=y.map(b=>({path:b,contents:Mt(b,"utf-8")})),I=o==="script"?y.map(b=>{let E=b.replace("-abi.json",".bin"),Ut=ie(E);return tt({abiFilepath:b,binFilepath:E,binExists:Ut,programType:o}),{path:E,contents:ne(Mt(E))}}):[],f=new et({outputDir:r,abiFiles:l,binFiles:I,programType:o});u(`Generating files..
`),pe.sync(`${r}/factories`),f.files.forEach(b=>{ce.sync(b.path),se(b.path,b.contents);let E=new RegExp(`^.+${a}/`,"m");u(` - ${b.path.replace(E,"")}`)}),u(`
Done.\u26A1`)}function ye(s){let{contract:t,script:e,predicate:r}=s;return t||!t&&!e&&!r?"contract":r?"predicate":"script"}function le(s){let{inputs:t,output:e,silent:r,contract:n,script:o,predicate:i}=s,a=process.cwd(),u=ye({contract:n,script:o,predicate:i});Ht({cwd:a,inputs:t,output:e,programType:u,silent:!!r})}function fe(s){s.requiredOption("-i, --inputs <path|glob...>","input paths/globals to your abi json files").requiredOption("-o, --output <dir>","directory path for generated files").addOption(new lt("-c, --contract","generate types for Contracts [default]").conflicts(["script","predicate"]).implies({script:void 0,predicate:void 0})).addOption(new lt("-s, --script","generate types for Scripts").conflicts(["contract","predicate"]).implies({contract:void 0,predicate:void 0})).addOption(new lt("-p, --predicate","generate types for Predicates").conflicts(["contract","script"]).implies({contract:void 0,script:void 0})).option("-S, --silent","omit output messages").action(le)}function Xt(s){let t=new ue,{argv:e,programName:r}=s;t.name(r),t.version(me.FUELS),t.usage("-i ../out/*-abi.json -o ./generated/"),fe(t),t.parse(e)}Xt({argv:process.argv,programName:"fuels-typegen"});
//# sourceMappingURL=bin.mjs.map