"use strict";var vt=Object.create;var k=Object.defineProperty;var Bt=Object.getOwnPropertyDescriptor;var jt=Object.getOwnPropertyNames;var Jt=Object.getPrototypeOf,qt=Object.prototype.hasOwnProperty;var Kt=(n,t,e)=>t in n?k(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var Qt=(n,t)=>{for(var e in t)k(n,e,{get:t[e],enumerable:!0})},yt=(n,t,e,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of jt(t))!qt.call(n,i)&&i!==e&&k(n,i,{get:()=>t[i],enumerable:!(r=Bt(t,i))||r.enumerable});return n};var Y=(n,t,e)=>(e=n!=null?vt(Jt(n)):{},yt(t||!n||!n.__esModule?k(e,"default",{value:n,enumerable:!0}):e,n)),Wt=n=>yt(k({},"__esModule",{value:!0}),n);var p=(n,t,e)=>(Kt(n,typeof t!="symbol"?t+"":t,e),e);var oe={};Qt(oe,{AbiTypeGen:()=>ut});module.exports=Wt(oe);var lt=Y(require("lodash.upperfirst"));function ft(n){let e=[r=>r.replace(/\s+/g,"-"),r=>r.replace(/\./g,"-"),r=>r.replace(/_/g,"-"),r=>r.replace(/-[a-z]/g,i=>i.slice(-1).toUpperCase()),r=>r.replace(/-/g,""),r=>r.replace(/^\d+/,""),r=>(0,lt.default)(r)].reduce((r,i)=>i(r),n);if(e==="")throw new Error(`Can't guess class name, please rename file: ${n}`);return e}function I(n){let{types:t,typeId:e}=n,r=t.find(({rawAbiType:{typeId:i}})=>i===e);if(!r)throw new Error(`Type ID not found: ${e}.`);return r.parseComponentsAttributes({types:t}),r}function d(n){let{types:t,typeArguments:e,parentTypeId:r,target:i}=n,a=`${i}Label`,s=[],c,m;r!==void 0&&(c=I({types:t,typeId:r}),m=c.attributes[a]),e.forEach(y=>{let b,T=y.type;try{b=I({types:t,typeId:T}).attributes[a]}catch{b="void"}if(y.typeArguments){let l=d({types:t,target:i,parentTypeId:y.type,typeArguments:y.typeArguments});s.push(l)}else s.push(`${b}`)});let u=s.join(", ");return m&&(u=`${m}<${u}>`),u}var j=class{name;types;rawAbiFunction;attributes;constructor(t){this.rawAbiFunction=t.rawAbiFunction,this.types=t.types,this.name=t.rawAbiFunction.name,this.attributes={inputs:this.bundleInputTypes(),output:this.bundleOutputTypes(),prefixedInputs:this.bundleInputTypes(!0)}}bundleInputTypes(t=!1){let{types:e}=this;return this.rawAbiFunction.inputs.map(i=>{let{name:a,type:s,typeArguments:c}=i,m=I({types:e,typeId:s}),u;return c?u=d({types:e,target:"input",parentTypeId:s,typeArguments:c}):u=m.attributes.inputLabel,t?`${a}: ${u}`:u}).join(", ")}bundleOutputTypes(){return d({types:this.types,target:"output",typeArguments:[this.rawAbiFunction.output]})}getDeclaration(){let{name:t}=this,{prefixedInputs:e,output:r}=this.attributes;return`${t}: InvokeFunction<[${e}], ${r}>`}};function bt(n){let{types:t,rawAbiFunction:e}=n;return new j({types:t,rawAbiFunction:e})}function Tt(n){let{types:t,rawAbiFunctions:e}=n;return e.map(i=>bt({types:t,rawAbiFunction:i}))}var f=class{rawAbiType;attributes;requireImportFromFuels;constructor(t){this.rawAbiType=t.rawAbiType,this.attributes={inputLabel:"unknown",outputLabel:"unknown"},this.requireImportFromFuels=!1}};var q=class extends f{name="array";static isSuitableFor(t){return q.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){var u,y;let{types:e}=t,{type:r}=this.rawAbiType,i=Number((u=r.match(q.MATCH_REGEX))==null?void 0:u[1]),a=[],s=[];(y=this.rawAbiType.components)==null||y.forEach(b=>{let{type:T,typeArguments:l}=b;if(l){let h=d({types:e,typeArguments:l,parentTypeId:T,target:"input"}),kt=d({types:e,typeArguments:l,parentTypeId:T,target:"output"});a.push(h),s.push(kt)}else{let{attributes:h}=I({types:e,typeId:T});a.push(h.inputLabel),s.push(h.outputLabel)}});let c=Array(i).fill(a[0]).join(", "),m=Array(i).fill(s[0]).join(", ");return this.attributes={inputLabel:`[${c}]`,outputLabel:`[${m}]`},this.attributes}},x=q;p(x,"swayType","[_; 2]"),p(x,"MATCH_REGEX",/^\[_; ([0-9]+)\]$/m);var Z=class extends f{name="str";static isSuitableFor(t){return Z.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes={inputLabel:"string",outputLabel:"string"},this.attributes}},E=Z;p(E,"swayType","str[3]"),p(E,"MATCH_REGEX",/^str\[(.+)\]$/m);var tt=class extends E{name="b256";static isSuitableFor(t){return tt.MATCH_REGEX.test(t.type)}},w=tt;p(w,"swayType","b256"),p(w,"MATCH_REGEX",/^b256$/m);var et=class extends w{name="b512";static isSuitableFor(t){return et.MATCH_REGEX.test(t.type)}},S=et;p(S,"swayType","struct B512"),p(S,"MATCH_REGEX",/^struct B512$/m);var rt=class extends f{name="bool";static isSuitableFor(t){return rt.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes={inputLabel:"boolean",outputLabel:"boolean"},this.attributes}},_=rt;p(_,"swayType","bool"),p(_,"MATCH_REGEX",/^bool$/m);function $(n){var i;let{rawAbiType:t,regex:e}=n,r=(i=t.type.match(n.regex))==null?void 0:i[1];if(!r){let a=`Couldn't extract struct name with: '${e}'.

`;throw a+=`Check your JSON ABI.

[source]
`,a+=`${JSON.stringify(t,null,2)}`,new Error(a)}return r}var v=class extends f{name="enum";static isSuitableFor(t){let e=v.MATCH_REGEX.test(t.type),r=v.IGNORE_REGEX.test(t.type);return e&&!r}parseComponentsAttributes(t){let e=this.getStructName();return this.attributes={structName:e,inputLabel:`${e}Input`,outputLabel:`${e}Output`},this.attributes}getStructName(){return $({rawAbiType:this.rawAbiType,regex:v.MATCH_REGEX})}getStructContents(t){let{types:e,target:r}=t,{components:i}=this.rawAbiType,a=i,s=`${r}Label`;return a.map(m=>{let{name:u,type:y}=m;if(y===0)return`${u}: []`;let{attributes:b}=I({types:e,typeId:y});return`${u}: ${b[s]}`}).join(", ")}},F=v;p(F,"swayType","enum MyEnumName"),p(F,"MATCH_REGEX",/^enum (.+)$/m),p(F,"IGNORE_REGEX",/^enum Option$/m);var K=class extends f{name="generic";static isSuitableFor(t){return K.MATCH_REGEX.test(t.type)}getStructName(){return $({rawAbiType:this.rawAbiType,regex:K.MATCH_REGEX})}parseComponentsAttributes(t){let e=this.getStructName();return this.attributes={inputLabel:e,outputLabel:e},this.attributes}},L=K;p(L,"swayType","generic T"),p(L,"MATCH_REGEX",/^generic ([^\s]+)$/m);var it=class extends f{name="option";static isSuitableFor(t){return it.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes={inputLabel:"Option",outputLabel:"Option"},this.attributes}},O=it;p(O,"swayType","enum Option"),p(O,"MATCH_REGEX",/^enum Option$/m);var nt=class extends f{name="u8";constructor(t){super(t),this.attributes={inputLabel:"BigNumberish",outputLabel:"number"},this.requireImportFromFuels=!0}static isSuitableFor(t){return nt.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes}},A=nt;p(A,"swayType","u8"),p(A,"MATCH_REGEX",/^u8$/m);var st=class extends A{name="u64";parseComponentsAttributes(t){return this.attributes={inputLabel:"BigNumberish",outputLabel:"BN"},this.attributes}static isSuitableFor(t){return st.MATCH_REGEX.test(t.type)}},R=st;p(R,"swayType","u64"),p(R,"MATCH_REGEX",/^u64$/m);var ot=class extends R{name="rawUntypedPtr";static isSuitableFor(t){return ot.MATCH_REGEX.test(t.type)}},M=ot;p(M,"swayType","raw untyped ptr"),p(M,"MATCH_REGEX",/^raw untyped ptr$/m);var B=class extends f{name="struct";static isSuitableFor(t){let e=B.MATCH_REGEX.test(t.type),r=B.IGNORE_REGEX.test(t.type);return e&&!r}parseComponentsAttributes(t){let e=this.getStructName();return this.attributes={structName:e,inputLabel:`${e}Input`,outputLabel:`${e}Output`},this.attributes}getStructName(){return $({rawAbiType:this.rawAbiType,regex:B.MATCH_REGEX})}getStructContents(t){let{types:e,target:r}=t,{components:i}=this.rawAbiType;return i.map(c=>{let{name:m,type:u,typeArguments:y}=c,b=I({types:e,typeId:u}),T;if(y)T=d({types:e,target:r,parentTypeId:u,typeArguments:y});else{let l=`${r}Label`;T=b.attributes[l]}return`${m}: ${T}`}).join(", ")}getStructDeclaration(t){let{types:e}=t,{typeParameters:r}=this.rawAbiType;return r?`<${r.map(s=>I({types:e,typeId:s})).map(({attributes:{inputLabel:s}})=>s).join(", ")}>`:""}},C=B;p(C,"swayType","struct MyStruct"),p(C,"MATCH_REGEX",/^struct (.+)$/m),p(C,"IGNORE_REGEX",/^struct (Vec|RawVec)$/m);var pt=class extends f{name="tupple";static isSuitableFor(t){return pt.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){var a;let{types:e}=t,r=[],i=[];return(a=this.rawAbiType.components)==null||a.forEach(s=>{let{type:c,typeArguments:m}=s;if(m){let u=d({types:e,typeArguments:m,parentTypeId:c,target:"input"}),y=d({types:e,typeArguments:m,parentTypeId:c,target:"output"});r.push(u),i.push(y)}else{let{attributes:u}=I({types:e,typeId:c});r.push(u.inputLabel),i.push(u.outputLabel)}}),this.attributes={inputLabel:`[${r.join(", ")}]`,outputLabel:`[${i.join(", ")}]`},this.attributes}},G=pt;p(G,"swayType","(_, _, _)"),p(G,"MATCH_REGEX",/^\([_,\s]+\)$/m);var at=class extends A{name="u16";static isSuitableFor(t){return at.MATCH_REGEX.test(t.type)}},H=at;p(H,"swayType","u16"),p(H,"MATCH_REGEX",/^u16$/m);var ct=class extends A{name="u32";static isSuitableFor(t){return ct.MATCH_REGEX.test(t.type)}},X=ct;p(X,"swayType","u32"),p(X,"MATCH_REGEX",/^u32$/m);var Q=class extends x{name="vector";static isSuitableFor(t){let e=Q.MATCH_REGEX.test(t.type),r=Q.IGNORE_REGEX.test(t.type);return e&&!r}parseComponentsAttributes(t){return this.attributes={inputLabel:"Vec",outputLabel:"Vec"},this.attributes}},N=Q;p(N,"swayType","struct Vec"),p(N,"MATCH_REGEX",/^struct Vec/m),p(N,"IGNORE_REGEX",/^struct RawVec$/m);var It=[x,w,S,_,F,L,O,M,E,C,G,H,X,R,A,N];function dt(n){let{rawAbiType:t}=n,{type:e}=t,r=It.find(i=>i.isSuitableFor({type:e}));if(!r)throw new Error(`Type not supported: ${e}`);return new r(n)}function At(n){return["()","struct RawVec"].indexOf(n.type)>=0}function gt(n){let t=[];return n.rawAbiTypes.forEach(e=>{let{type:r}=e;if(!At({type:r})){let a=dt({rawAbiType:e});t.push(a)}}),t.forEach(e=>{e.parseComponentsAttributes({types:t})}),t}var W=class{name;programType;filepath;outputDir;commonTypesInUse=[];rawContents;hexlifiedBinContents;types;functions;constructor(t){let{filepath:e,outputDir:r,rawContents:i,hexlifiedBinContents:a,programType:s}=t,c=/([^/]+)-abi\.json$/m,m=e.match(c);if(!m||m.length===0)throw new Error(`Could not parse name from abi file: ${e}`);let y=`${ft(m[1])}Abi`;this.name=y,this.programType=s,this.filepath=e,this.rawContents=i,this.hexlifiedBinContents=a,this.outputDir=r;let{types:b,functions:T}=this.parse();this.types=b,this.functions=T,this.computeCommonTypesInUse()}parse(){let{types:t,functions:e}=this.rawContents,r=gt({rawAbiTypes:t}),i=Tt({rawAbiFunctions:e,types:r});return{types:r,functions:i}}computeCommonTypesInUse(){let t={option:"Option",enum:"Enum",vector:"Vec"};this.commonTypesInUse=[],Object.keys(t).forEach(e=>{if(!!this.types.find(i=>i.name===e)){let i=t[e];this.commonTypesInUse.push(i)}})}};var $t=require("path");var xt=require("@fuel-ts/versions"),mt=require("handlebars");var ht=`/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: {{FUELS}}
  Forc version: {{FORC}}
  Fuel-Core version: {{FUEL_CORE}}
*/
`;function g(n){let{data:t,template:e}=n,r={strict:!0,noEscape:!0},i=(0,mt.compile)(e,r),a=(0,mt.compile)(ht,r);return i({...t,header:a(xt.versions)}).replace(/[\n]{3,}/gm,`

`)}var Et=`{{header}}

/*
  Mimics Sway Enum, requires at least one Key-Value but
  does not raise error on multiple pairs.
  This is done in the abi-coder
*/
export type Enum<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

/*
  Mimics Sway Option and Vectors.
  Vectors are treated like arrays in Typescript.
*/
export type Option<T> = T | undefined;

export type Vec<T> = T[];
`;function P(){return g({template:Et})}var wt=`{{header}}

{{#if isGeneratingContracts}}
{{#each abis}}
export type { {{name}} } from './{{name}}';
{{/each}}
{{/if}}

{{#each abis}}
export { {{name}}__factory } from './factories/{{name}}__factory';
{{/each}}
`;function U(n){let{abis:t}=n,e=t[0].programType==="contract";return g({template:wt,data:{abis:t,isGeneratingContracts:e}})}function D(n){let{types:t}=n;return{enums:t.filter(r=>r.name==="enum").map(r=>{let i=r,a=i.getStructName(),s=i.getStructContents({types:t,target:"input"}),c=i.getStructContents({types:t,target:"output"});return{structName:a,inputValues:s,outputValues:c,recycleRef:s===c}})}}var Ft=Y(require("lodash.uniq")),ee=(n,t)=>n.toLowerCase().localeCompare(t.toLowerCase());function V(n){let{types:t,baseMembers:e=[]}=n,i=t.filter(s=>s.requireImportFromFuels).map(s=>s.attributes.inputLabel),a=(0,Ft.default)(e.concat(i).sort(ee));return{imports:a.length?a:void 0}}function z(n){let{types:t}=n;return{structs:t.filter(r=>r.name==="struct").map(r=>{let i=r,a=i.getStructName(),s=i.getStructContents({types:t,target:"input"}),c=i.getStructContents({types:t,target:"output"}),m=i.getStructDeclaration({types:t});return{structName:a,typeAnnotations:m,inputValues:s,outputValues:c,recycleRef:s===c}})}}var Ct=`{{header}}

{{#if imports}}
import type {
{{#each imports}}
  {{this}},
{{/each}}
} from 'fuels';
{{/if}}

{{#if commonTypesInUse}}
import type { {{commonTypesInUse}} } from "./common";
{{/if}}

{{#each enums}}
export type {{structName}}Input = Enum<{ {{inputValues}} }>;
{{#if recycleRef}}
export type {{structName}}Output = {{structName}}Input;
{{else}}
export type {{structName}}Output = Enum<{ {{outputValues}} }>;
{{/if}}
{{/each}}


{{#each structs}}
export type {{structName}}Input{{typeAnnotations}} = { {{inputValues}} };
{{#if recycleRef}}
export type {{structName}}Output{{typeAnnotations}} = {{structName}}Input{{typeAnnotations}};
{{else}}
export type {{structName}}Output{{typeAnnotations}} = { {{outputValues}} };
{{/if}}
{{/each}}


interface {{capitalizedName}}Interface extends Interface {
  functions: {
    {{#each functionsFragments}}
    {{this}}: FunctionFragment;
    {{/each}}
  };

  {{#each encoders}}
  encodeFunctionData(functionFragment: '{{functionName}}', values: [{{input}}]): Uint8Array;
  {{/each}}

  {{#each decoders}}
  decodeFunctionData(functionFragment: '{{functionName}}', data: BytesLike): DecodedValue;
  {{/each}}
}


export class {{capitalizedName}} extends Contract {
  interface: {{capitalizedName}}Interface;
  functions: {
    {{#each functionsTypedefs}}
    {{this}};
    {{/each}}
  };
}
`;function Nt(n){let{name:t,types:e,functions:r,commonTypesInUse:i}=n.abi,a=r.map(l=>l.getDeclaration()),s=r.map(l=>l.name),c=r.map(l=>({functionName:l.name,input:l.attributes.inputs})),m=r.map(l=>({functionName:l.name})),{enums:u}=D({types:e}),{structs:y}=z({types:e}),{imports:b}=V({types:e,baseMembers:["Interface","FunctionFragment","DecodedValue","Contract","BytesLike","InvokeFunction","BN"]});return g({template:Ct,data:{capitalizedName:t,commonTypesInUse:i.join(", "),functionsTypedefs:a,functionsFragments:s,encoders:c,decoders:m,structs:y,enums:u,imports:b}})}var St=`{{header}}

import { Interface, Contract } from "fuels";
import type { Provider, Account, AbstractAddress } from "fuels";
import type { {{capitalizedName}}, {{capitalizedName}}Interface } from "../{{capitalizedName}}";

const _abi = {{abiJsonString}}

export class {{capitalizedName}}__factory {
  static readonly abi = _abi
  static createInterface(): {{capitalizedName}}Interface {
    return new Interface(_abi) as unknown as {{capitalizedName}}Interface
  }
  static connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ): {{capitalizedName}} {
    return new Contract(id, _abi, accountOrProvider) as unknown as {{capitalizedName}}
  }
}
`;function _t(n){let{name:t,rawContents:e}=n.abi,r=JSON.stringify(e,null,2);return g({template:St,data:{capitalizedName:t,abiJsonString:r}})}function Lt(n){let{abis:t,outputDir:e}=n,r=[],i=t.find(s=>s.commonTypesInUse.length>0);t.forEach(s=>{let{name:c}=s,m=`${e}/${c}.d.ts`,u=`${e}/factories/${c}__factory.ts`,y={path:m,contents:Nt({abi:s})},b={path:u,contents:_t({abi:s})};r.push(y),r.push(b)});let a={path:`${e}/index.ts`,contents:U({abis:t})};if(r.push(a),i){let c={path:(0,$t.join)(e,"common.d.ts"),contents:P()};r.push(c)}return r}var Gt=require("path");var Ot=`{{header}}

{{#if imports}}
import {
{{#each imports}}
  {{this}},
{{/each}}
} from 'fuels';
{{/if}}

{{#if commonTypesInUse}}
import type { {{commonTypesInUse}} } from "./common";
{{/if}}


{{#each enums}}
export type {{structName}}Input = Enum<{ {{inputValues}} }>;
{{#if recycleRef}}
export type {{structName}}Output = {{structName}}Input;
{{else}}
export type {{structName}}Output = Enum<{ {{outputValues}} }>;
{{/if}}
{{/each}}


{{#each structs}}
export type {{structName}}Input{{typeAnnotations}} = { {{inputValues}} };
{{#if recycleRef}}
export type {{structName}}Output{{typeAnnotations}} = {{structName}}Input{{typeAnnotations}};
{{else}}
export type {{structName}}Output{{typeAnnotations}} = { {{outputValues}} };
{{/if}}
{{/each}}

type {{capitalizedName}}Inputs = [{{inputs}}];

const _abi = {{abiJsonString}}

const _bin = '{{hexlifiedBinString}}'

export class {{capitalizedName}}__factory {

  static readonly abi = _abi
  static readonly bin = _bin;

  static createInstance(provider?: Provider) {

    const { abi, bin } = {{capitalizedName}}__factory

    const predicate = new Predicate(bin, abi, provider);

    return predicate;

  }

}
`;function Mt(n){let{abi:t}=n,{types:e}=t,{rawContents:r,name:i,hexlifiedBinContents:a}=n.abi,s=JSON.stringify(r,null,2),c=t.functions.find(h=>h.name==="main");if(!c)throw new Error("ABI doesn't have a 'main()' method.");let{enums:m}=D({types:e}),{structs:u}=z({types:e}),{imports:y}=V({types:e,baseMembers:["Predicate","Provider"]}),{prefixedInputs:b,output:T}=c.attributes;return g({template:Ot,data:{inputs:b,output:T,structs:u,enums:m,abiJsonString:s,hexlifiedBinString:a,capitalizedName:i,imports:y}})}function Ht(n){let{abis:t,outputDir:e}=n,r=[],i=t.find(s=>s.commonTypesInUse.length>0);t.forEach(s=>{let{name:c}=s,u={path:`${e}/factories/${c}__factory.ts`,contents:Mt({abi:s})};r.push(u)});let a={path:`${e}/index.ts`,contents:U({abis:t})};if(r.push(a),i){let c={path:(0,Gt.join)(e,"common.d.ts"),contents:P()};r.push(c)}return r}var Ut=require("path");var Xt=`{{header}}

{{#if imports}}
import {
{{#each imports}}
  {{this}},
{{/each}}
} from 'fuels';
{{/if}}

{{#if commonTypesInUse}}
import type { {{commonTypesInUse}} } from "./common";
{{/if}}


{{#each enums}}
export type {{structName}}Input = Enum<{ {{inputValues}} }>;
{{#if recycleRef}}
export type {{structName}}Output = {{structName}}Input;
{{else}}
export type {{structName}}Output = Enum<{ {{outputValues}} }>;
{{/if}}
{{/each}}


{{#each structs}}
export type {{structName}}Input{{typeAnnotations}} = { {{inputValues}} };
{{#if recycleRef}}
export type {{structName}}Output{{typeAnnotations}} = {{structName}}Input{{typeAnnotations}};
{{else}}
export type {{structName}}Output{{typeAnnotations}} = { {{outputValues}} };
{{/if}}
{{/each}}

type {{capitalizedName}}Inputs = [{{inputs}}];
type {{capitalizedName}}Output = {{output}};

const _abi = {{abiJsonString}}

const _bin = '{{hexlifiedBinString}}'

export class {{capitalizedName}}__factory {

  static readonly abi = _abi
  static readonly bin = _bin

  static createInstance(wallet: Account) {

    const { abi, bin } = {{capitalizedName}}__factory

    const script = new Script<
      {{capitalizedName}}Inputs,
      {{capitalizedName}}Output
    >(bin, abi, wallet);

    return script;

  }

}
`;function Pt(n){let{abi:t}=n,{types:e}=t,{rawContents:r,name:i,hexlifiedBinContents:a}=n.abi,s=JSON.stringify(r,null,2),c=t.functions.find(h=>h.name==="main");if(!c)throw new Error("ABI doesn't have a 'main()' method.");let{enums:m}=D({types:e}),{structs:u}=z({types:e}),{imports:y}=V({types:e,baseMembers:["Script","Account"]}),{prefixedInputs:b,output:T}=c.attributes;return g({template:Xt,data:{inputs:b,output:T,structs:u,enums:m,abiJsonString:s,hexlifiedBinString:a,capitalizedName:i,imports:y}})}function Dt(n){let{abis:t,outputDir:e}=n,r=[],i=t.find(s=>s.commonTypesInUse.length>0);t.forEach(s=>{let{name:c}=s,u={path:`${e}/factories/${c}__factory.ts`,contents:Pt({abi:s})};r.push(u)});let a={path:`${e}/index.ts`,contents:U({abis:t})};if(r.push(a),i){let c={path:(0,Ut.join)(e,"common.d.ts"),contents:P()};r.push(c)}return r}var Vt=Y(require("lodash.upperfirst"));function zt(n){let{abiFilepath:t,binFilepath:e,binExists:r,programType:i}=n,a=i==="script";if(!r&&a)throw new Error([`Could not find BIN file for counterpart ${(0,Vt.default)(i)} ABI.`,`  - ABI: ${t}`,`  - BIN: ${e}`,i].join(`
`))}var ut=class{abis;abiFiles;binFiles;outputDir;files;constructor(t){let{abiFiles:e,binFiles:r,outputDir:i,programType:a}=t;this.outputDir=i,this.abiFiles=e,this.binFiles=r,this.abis=this.abiFiles.map(s=>{let c=s.path.replace("-abi.json",".bin"),m=this.binFiles.find(({path:y})=>y===c);return m||zt({abiFilepath:s.path,binExists:!!m,binFilepath:c,programType:a}),new W({filepath:s.path,rawContents:JSON.parse(s.contents),hexlifiedBinContents:m==null?void 0:m.contents,outputDir:i,programType:a})}),this.files=this.getAssembledFiles({programType:a})}getAssembledFiles(t){let{abis:e,outputDir:r}=this,{programType:i}=t;switch(i){case"contract":return Lt({abis:e,outputDir:r});case"script":return Dt({abis:e,outputDir:r});case"predicate":return Ht({abis:e,outputDir:r});default:throw new Error(`Invalid Typegen programType: ${i}`)}}};0&&(module.exports={AbiTypeGen});
//# sourceMappingURL=index.js.map