var Ht=Object.defineProperty;var Xt=(s,t,e)=>t in s?Ht(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e;var p=(s,t,e)=>(Xt(s,typeof t!="symbol"?t+"":t,e),e);import{hexlify as te}from"@ethersproject/bytes";import{existsSync as ee,readFileSync as Mt,writeFileSync as re}from"fs";import{sync as ie}from"glob";import ne from"mkdirp";import{basename as se}from"path";import oe from"rimraf";import Ut from"lodash.upperfirst";function lt(s){let e=[r=>r.replace(/\s+/g,"-"),r=>r.replace(/\./g,"-"),r=>r.replace(/_/g,"-"),r=>r.replace(/-[a-z]/g,i=>i.slice(-1).toUpperCase()),r=>r.replace(/-/g,""),r=>r.replace(/^\d+/,""),r=>Ut(r)].reduce((r,i)=>i(r),s);if(e==="")throw new Error(`Can't guess class name, please rename file: ${s}`);return e}function h(s){let{types:t,typeId:e}=s,r=t.find(({rawAbiType:{typeId:i}})=>i===e);if(!r)throw new Error(`Type ID not found: ${e}.`);return r.parseComponentsAttributes({types:t}),r}function g(s){let{types:t,typeArguments:e,parentTypeId:r,target:i}=s,o=`${i}Label`,n=[],a,u;r!==void 0&&(a=h({types:t,typeId:r}),u=a.attributes[o]),e.forEach(l=>{let T,d=l.type;try{T=h({types:t,typeId:d}).attributes[o]}catch{T="void"}if(l.typeArguments){let f=g({types:t,target:i,parentTypeId:l.type,typeArguments:l.typeArguments});n.push(f)}else n.push(`${T}`)});let y=n.join(", ");return u&&(y=`${u}<${y}>`),y}var J=class{name;types;rawAbiFunction;attributes;constructor(t){this.rawAbiFunction=t.rawAbiFunction,this.types=t.types,this.name=t.rawAbiFunction.name,this.attributes={inputs:this.bundleInputTypes(),output:this.bundleOutputTypes(),prefixedInputs:this.bundleInputTypes(!0)}}bundleInputTypes(t=!1){let{types:e}=this;return this.rawAbiFunction.inputs.map(i=>{let{name:o,type:n,typeArguments:a}=i,u=h({types:e,typeId:n}),y;return a?y=g({types:e,target:"input",parentTypeId:n,typeArguments:a}):y=u.attributes.inputLabel,t?`${o}: ${y}`:y}).join(", ")}bundleOutputTypes(){return g({types:this.types,target:"output",typeArguments:[this.rawAbiFunction.output]})}getDeclaration(){let{name:t}=this,{prefixedInputs:e,output:r}=this.attributes;return`${t}: InvokeFunction<[${e}], ${r}>`}};function ft(s){let{types:t,rawAbiFunction:e}=s;return new J({types:t,rawAbiFunction:e})}function bt(s){let{types:t,rawAbiFunctions:e}=s;return e.map(i=>ft({types:t,rawAbiFunction:i}))}var I=class{rawAbiType;attributes;requireImportFromFuels;constructor(t){this.rawAbiType=t.rawAbiType,this.attributes={inputLabel:"unknown",outputLabel:"unknown"},this.requireImportFromFuels=!1}};var K=class extends I{name="array";static isSuitableFor(t){return K.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){var y,l;let{types:e}=t,{type:r}=this.rawAbiType,i=Number((y=r.match(K.MATCH_REGEX))==null?void 0:y[1]),o=[],n=[];(l=this.rawAbiType.components)==null||l.forEach(T=>{let{type:d,typeArguments:f}=T;if(f){let b=g({types:e,typeArguments:f,parentTypeId:d,target:"input"}),E=g({types:e,typeArguments:f,parentTypeId:d,target:"output"});o.push(b),n.push(E)}else{let{attributes:b}=h({types:e,typeId:d});o.push(b.inputLabel),n.push(b.outputLabel)}});let a=Array(i).fill(o[0]).join(", "),u=Array(i).fill(n[0]).join(", ");return this.attributes={inputLabel:`[${a}]`,outputLabel:`[${u}]`},this.attributes}},F=K;p(F,"swayType","[_; 2]"),p(F,"MATCH_REGEX",/^\[_; ([0-9]+)\]$/m);var et=class extends I{name="str";static isSuitableFor(t){return et.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes={inputLabel:"string",outputLabel:"string"},this.attributes}},w=et;p(w,"swayType","str[3]"),p(w,"MATCH_REGEX",/^str\[(.+)\]$/m);var rt=class extends w{name="b256";static isSuitableFor(t){return rt.MATCH_REGEX.test(t.type)}},R=rt;p(R,"swayType","b256"),p(R,"MATCH_REGEX",/^b256$/m);var it=class extends R{name="b512";static isSuitableFor(t){return it.MATCH_REGEX.test(t.type)}},$=it;p($,"swayType","struct B512"),p($,"MATCH_REGEX",/^struct B512$/m);var nt=class extends I{name="bool";static isSuitableFor(t){return nt.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes={inputLabel:"boolean",outputLabel:"boolean"},this.attributes}},L=nt;p(L,"swayType","bool"),p(L,"MATCH_REGEX",/^bool$/m);function G(s){var i;let{rawAbiType:t,regex:e}=s,r=(i=t.type.match(s.regex))==null?void 0:i[1];if(!r){let o=`Couldn't extract struct name with: '${e}'.

`;throw o+=`Check your JSON ABI.

[source]
`,o+=`${JSON.stringify(t,null,2)}`,new Error(o)}return r}var v=class extends I{name="enum";static isSuitableFor(t){let e=v.MATCH_REGEX.test(t.type),r=v.IGNORE_REGEX.test(t.type);return e&&!r}parseComponentsAttributes(t){let e=this.getStructName();return this.attributes={structName:e,inputLabel:`${e}Input`,outputLabel:`${e}Output`},this.attributes}getStructName(){return G({rawAbiType:this.rawAbiType,regex:v.MATCH_REGEX})}getStructContents(t){let{types:e,target:r}=t,{components:i}=this.rawAbiType,o=i,n=`${r}Label`;return o.map(u=>{let{name:y,type:l}=u;if(l===0)return`${y}: []`;let{attributes:T}=h({types:e,typeId:l});return`${y}: ${T[n]}`}).join(", ")}},N=v;p(N,"swayType","enum MyEnumName"),p(N,"MATCH_REGEX",/^enum (.+)$/m),p(N,"IGNORE_REGEX",/^enum Option$/m);var Y=class extends I{name="generic";static isSuitableFor(t){return Y.MATCH_REGEX.test(t.type)}getStructName(){return G({rawAbiType:this.rawAbiType,regex:Y.MATCH_REGEX})}parseComponentsAttributes(t){let e=this.getStructName();return this.attributes={inputLabel:e,outputLabel:e},this.attributes}},O=Y;p(O,"swayType","generic T"),p(O,"MATCH_REGEX",/^generic ([^\s]+)$/m);var st=class extends I{name="option";static isSuitableFor(t){return st.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes={inputLabel:"Option",outputLabel:"Option"},this.attributes}},M=st;p(M,"swayType","enum Option"),p(M,"MATCH_REGEX",/^enum Option$/m);var ot=class extends I{name="u8";constructor(t){super(t),this.attributes={inputLabel:"BigNumberish",outputLabel:"number"},this.requireImportFromFuels=!0}static isSuitableFor(t){return ot.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes}},A=ot;p(A,"swayType","u8"),p(A,"MATCH_REGEX",/^u8$/m);var pt=class extends A{name="u64";parseComponentsAttributes(t){return this.attributes={inputLabel:"BigNumberish",outputLabel:"BN"},this.attributes}static isSuitableFor(t){return pt.MATCH_REGEX.test(t.type)}},C=pt;p(C,"swayType","u64"),p(C,"MATCH_REGEX",/^u64$/m);var at=class extends C{name="rawUntypedPtr";static isSuitableFor(t){return at.MATCH_REGEX.test(t.type)}},P=at;p(P,"swayType","raw untyped ptr"),p(P,"MATCH_REGEX",/^raw untyped ptr$/m);var j=class extends I{name="struct";static isSuitableFor(t){let e=j.MATCH_REGEX.test(t.type),r=j.IGNORE_REGEX.test(t.type);return e&&!r}parseComponentsAttributes(t){let e=this.getStructName();return this.attributes={structName:e,inputLabel:`${e}Input`,outputLabel:`${e}Output`},this.attributes}getStructName(){return G({rawAbiType:this.rawAbiType,regex:j.MATCH_REGEX})}getStructContents(t){let{types:e,target:r}=t,{components:i}=this.rawAbiType;return i.map(a=>{let{name:u,type:y,typeArguments:l}=a,T=h({types:e,typeId:y}),d;if(l)d=g({types:e,target:r,parentTypeId:y,typeArguments:l});else{let f=`${r}Label`;d=T.attributes[f]}return`${u}: ${d}`}).join(", ")}getStructDeclaration(t){let{types:e}=t,{typeParameters:r}=this.rawAbiType;return r?`<${r.map(n=>h({types:e,typeId:n})).map(({attributes:{inputLabel:n}})=>n).join(", ")}>`:""}},S=j;p(S,"swayType","struct MyStruct"),p(S,"MATCH_REGEX",/^struct (.+)$/m),p(S,"IGNORE_REGEX",/^struct (Vec|RawVec)$/m);var ct=class extends I{name="tupple";static isSuitableFor(t){return ct.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){var o;let{types:e}=t,r=[],i=[];return(o=this.rawAbiType.components)==null||o.forEach(n=>{let{type:a,typeArguments:u}=n;if(u){let y=g({types:e,typeArguments:u,parentTypeId:a,target:"input"}),l=g({types:e,typeArguments:u,parentTypeId:a,target:"output"});r.push(y),i.push(l)}else{let{attributes:y}=h({types:e,typeId:a});r.push(y.inputLabel),i.push(y.outputLabel)}}),this.attributes={inputLabel:`[${r.join(", ")}]`,outputLabel:`[${i.join(", ")}]`},this.attributes}},H=ct;p(H,"swayType","(_, _, _)"),p(H,"MATCH_REGEX",/^\([_,\s]+\)$/m);var mt=class extends A{name="u16";static isSuitableFor(t){return mt.MATCH_REGEX.test(t.type)}},X=mt;p(X,"swayType","u16"),p(X,"MATCH_REGEX",/^u16$/m);var ut=class extends A{name="u32";static isSuitableFor(t){return ut.MATCH_REGEX.test(t.type)}},U=ut;p(U,"swayType","u32"),p(U,"MATCH_REGEX",/^u32$/m);var Q=class extends F{name="vector";static isSuitableFor(t){let e=Q.MATCH_REGEX.test(t.type),r=Q.IGNORE_REGEX.test(t.type);return e&&!r}parseComponentsAttributes(t){return this.attributes={inputLabel:"Vec",outputLabel:"Vec"},this.attributes}},_=Q;p(_,"swayType","struct Vec"),p(_,"MATCH_REGEX",/^struct Vec/m),p(_,"IGNORE_REGEX",/^struct RawVec$/m);var Tt=[F,R,$,L,N,O,M,P,w,S,H,X,U,C,A,_];function It(s){let{rawAbiType:t}=s,{type:e}=t,r=Tt.find(i=>i.isSuitableFor({type:e}));if(!r)throw new Error(`Type not supported: ${e}`);return new r(s)}function dt(s){return["()","struct RawVec"].indexOf(s.type)>=0}function ht(s){let t=[];return s.rawAbiTypes.forEach(e=>{let{type:r}=e;if(!dt({type:r})){let o=It({rawAbiType:e});t.push(o)}}),t.forEach(e=>{e.parseComponentsAttributes({types:t})}),t}var W=class{name;programType;filepath;outputDir;commonTypesInUse=[];rawContents;hexlifiedBinContents;types;functions;constructor(t){let{filepath:e,outputDir:r,rawContents:i,hexlifiedBinContents:o,programType:n}=t,a=/([^/]+)-abi\.json$/m,u=e.match(a);if(!u||u.length===0)throw new Error(`Could not parse name from abi file: ${e}`);let l=`${lt(u[1])}Abi`;this.name=l,this.programType=n,this.filepath=e,this.rawContents=i,this.hexlifiedBinContents=o,this.outputDir=r;let{types:T,functions:d}=this.parse();this.types=T,this.functions=d,this.computeCommonTypesInUse()}parse(){let{types:t,functions:e}=this.rawContents,r=ht({rawAbiTypes:t}),i=bt({rawAbiFunctions:e,types:r});return{types:r,functions:i}}computeCommonTypesInUse(){let t={option:"Option",enum:"Enum",vector:"Vec"};this.commonTypesInUse=[],Object.keys(t).forEach(e=>{if(!!this.types.find(i=>i.name===e)){let i=t[e];this.commonTypesInUse.push(i)}})}};import{join as qt}from"path";import{versions as Vt}from"@fuel-ts/versions";import{compile as At}from"handlebars";var gt=`/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: {{FUELS}}
  Forc version: {{FORC}}
  Fuel-Core version: {{FUEL_CORE}}
*/
`;function x(s){let{data:t,template:e}=s,r={strict:!0,noEscape:!0},i=At(e,r),o=At(gt,r);return i({...t,header:o(Vt)}).replace(/[\n]{3,}/gm,`

`)}var xt=`{{header}}

/*
  Mimics Sway Enum, requires at least one Key-Value but
  does not raise error on multiple pairs.
  This is done in the abi-coder
*/
export type Enum<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

/*
  Mimics Sway Option and Vectors.
  Vectors are treated like arrays in Typescript.
*/
export type Option<T> = T | undefined;

export type Vec<T> = T[];
`;function D(){return x({template:xt})}var Et=`{{header}}

{{#if isGeneratingContracts}}
{{#each abis}}
export type { {{name}} } from './{{name}}';
{{/each}}
{{/if}}

{{#each abis}}
export { {{name}}__factory } from './factories/{{name}}__factory';
{{/each}}
`;function V(s){let{abis:t}=s,e=t[0].programType==="contract";return x({template:Et,data:{abis:t,isGeneratingContracts:e}})}function z(s){let{types:t}=s;return{enums:t.filter(r=>r.name==="enum").map(r=>{let i=r,o=i.getStructName(),n=i.getStructContents({types:t,target:"input"}),a=i.getStructContents({types:t,target:"output"});return{structName:o,inputValues:n,outputValues:a,recycleRef:n===a}})}}import kt from"lodash.uniq";var vt=(s,t)=>s.toLowerCase().localeCompare(t.toLowerCase());function B(s){let{types:t,baseMembers:e=[]}=s,i=t.filter(n=>n.requireImportFromFuels).map(n=>n.attributes.inputLabel),o=kt(e.concat(i).sort(vt));return{imports:o.length?o:void 0}}function k(s){let{types:t}=s;return{structs:t.filter(r=>r.name==="struct").map(r=>{let i=r,o=i.getStructName(),n=i.getStructContents({types:t,target:"input"}),a=i.getStructContents({types:t,target:"output"}),u=i.getStructDeclaration({types:t});return{structName:o,typeAnnotations:u,inputValues:n,outputValues:a,recycleRef:n===a}})}}var Ft=`{{header}}

{{#if imports}}
import type {
{{#each imports}}
  {{this}},
{{/each}}
} from 'fuels';
{{/if}}

{{#if commonTypesInUse}}
import type { {{commonTypesInUse}} } from "./common";
{{/if}}

{{#each enums}}
export type {{structName}}Input = Enum<{ {{inputValues}} }>;
{{#if recycleRef}}
export type {{structName}}Output = {{structName}}Input;
{{else}}
export type {{structName}}Output = Enum<{ {{outputValues}} }>;
{{/if}}
{{/each}}


{{#each structs}}
export type {{structName}}Input{{typeAnnotations}} = { {{inputValues}} };
{{#if recycleRef}}
export type {{structName}}Output{{typeAnnotations}} = {{structName}}Input{{typeAnnotations}};
{{else}}
export type {{structName}}Output{{typeAnnotations}} = { {{outputValues}} };
{{/if}}
{{/each}}


interface {{capitalizedName}}Interface extends Interface {
  functions: {
    {{#each functionsFragments}}
    {{this}}: FunctionFragment;
    {{/each}}
  };

  {{#each encoders}}
  encodeFunctionData(functionFragment: '{{functionName}}', values: [{{input}}]): Uint8Array;
  {{/each}}

  {{#each decoders}}
  decodeFunctionData(functionFragment: '{{functionName}}', data: BytesLike): DecodedValue;
  {{/each}}
}


export class {{capitalizedName}} extends Contract {
  interface: {{capitalizedName}}Interface;
  functions: {
    {{#each functionsTypedefs}}
    {{this}};
    {{/each}}
  };
}
`;function wt(s){let{name:t,types:e,functions:r,commonTypesInUse:i}=s.abi,o=r.map(f=>f.getDeclaration()),n=r.map(f=>f.name),a=r.map(f=>({functionName:f.name,input:f.attributes.inputs})),u=r.map(f=>({functionName:f.name})),{enums:y}=z({types:e}),{structs:l}=k({types:e}),{imports:T}=B({types:e,baseMembers:["Interface","FunctionFragment","DecodedValue","Contract","BytesLike","InvokeFunction","BN"]});return x({template:Ft,data:{capitalizedName:t,commonTypesInUse:i.join(", "),functionsTypedefs:o,functionsFragments:n,encoders:a,decoders:u,structs:l,enums:y,imports:T}})}var Rt=`{{header}}

import { Interface, Contract } from "fuels";
import type { Provider, Account, AbstractAddress } from "fuels";
import type { {{capitalizedName}}, {{capitalizedName}}Interface } from "../{{capitalizedName}}";

const _abi = {{abiJsonString}}

export class {{capitalizedName}}__factory {
  static readonly abi = _abi
  static createInterface(): {{capitalizedName}}Interface {
    return new Interface(_abi) as unknown as {{capitalizedName}}Interface
  }
  static connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ): {{capitalizedName}} {
    return new Contract(id, _abi, accountOrProvider) as unknown as {{capitalizedName}}
  }
}
`;function Ct(s){let{name:t,rawContents:e}=s.abi,r=JSON.stringify(e,null,2);return x({template:Rt,data:{capitalizedName:t,abiJsonString:r}})}function Nt(s){let{abis:t,outputDir:e}=s,r=[],i=t.find(n=>n.commonTypesInUse.length>0);t.forEach(n=>{let{name:a}=n,u=`${e}/${a}.d.ts`,y=`${e}/factories/${a}__factory.ts`,l={path:u,contents:wt({abi:n})},T={path:y,contents:Ct({abi:n})};r.push(l),r.push(T)});let o={path:`${e}/index.ts`,contents:V({abis:t})};if(r.push(o),i){let a={path:qt(e,"common.d.ts"),contents:D()};r.push(a)}return r}import{join as Yt}from"path";var St=`{{header}}

{{#if imports}}
import {
{{#each imports}}
  {{this}},
{{/each}}
} from 'fuels';
{{/if}}

{{#if commonTypesInUse}}
import type { {{commonTypesInUse}} } from "./common";
{{/if}}


{{#each enums}}
export type {{structName}}Input = Enum<{ {{inputValues}} }>;
{{#if recycleRef}}
export type {{structName}}Output = {{structName}}Input;
{{else}}
export type {{structName}}Output = Enum<{ {{outputValues}} }>;
{{/if}}
{{/each}}


{{#each structs}}
export type {{structName}}Input{{typeAnnotations}} = { {{inputValues}} };
{{#if recycleRef}}
export type {{structName}}Output{{typeAnnotations}} = {{structName}}Input{{typeAnnotations}};
{{else}}
export type {{structName}}Output{{typeAnnotations}} = { {{outputValues}} };
{{/if}}
{{/each}}

type {{capitalizedName}}Inputs = [{{inputs}}];

const _abi = {{abiJsonString}}

const _bin = '{{hexlifiedBinString}}'

export class {{capitalizedName}}__factory {

  static readonly abi = _abi
  static readonly bin = _bin;

  static createInstance(provider?: Provider) {

    const { abi, bin } = {{capitalizedName}}__factory

    const predicate = new Predicate(bin, abi, provider);

    return predicate;

  }

}
`;function _t(s){let{abi:t}=s,{types:e}=t,{rawContents:r,name:i,hexlifiedBinContents:o}=s.abi,n=JSON.stringify(r,null,2),a=t.functions.find(b=>b.name==="main");if(!a)throw new Error("ABI doesn't have a 'main()' method.");let{enums:u}=z({types:e}),{structs:y}=k({types:e}),{imports:l}=B({types:e,baseMembers:["Predicate","Provider"]}),{prefixedInputs:T,output:d}=a.attributes;return x({template:St,data:{inputs:T,output:d,structs:y,enums:u,abiJsonString:n,hexlifiedBinString:o,capitalizedName:i,imports:l}})}function $t(s){let{abis:t,outputDir:e}=s,r=[],i=t.find(n=>n.commonTypesInUse.length>0);t.forEach(n=>{let{name:a}=n,y={path:`${e}/factories/${a}__factory.ts`,contents:_t({abi:n})};r.push(y)});let o={path:`${e}/index.ts`,contents:V({abis:t})};if(r.push(o),i){let a={path:Yt(e,"common.d.ts"),contents:D()};r.push(a)}return r}import{join as Wt}from"path";var Lt=`{{header}}

{{#if imports}}
import {
{{#each imports}}
  {{this}},
{{/each}}
} from 'fuels';
{{/if}}

{{#if commonTypesInUse}}
import type { {{commonTypesInUse}} } from "./common";
{{/if}}


{{#each enums}}
export type {{structName}}Input = Enum<{ {{inputValues}} }>;
{{#if recycleRef}}
export type {{structName}}Output = {{structName}}Input;
{{else}}
export type {{structName}}Output = Enum<{ {{outputValues}} }>;
{{/if}}
{{/each}}


{{#each structs}}
export type {{structName}}Input{{typeAnnotations}} = { {{inputValues}} };
{{#if recycleRef}}
export type {{structName}}Output{{typeAnnotations}} = {{structName}}Input{{typeAnnotations}};
{{else}}
export type {{structName}}Output{{typeAnnotations}} = { {{outputValues}} };
{{/if}}
{{/each}}

type {{capitalizedName}}Inputs = [{{inputs}}];
type {{capitalizedName}}Output = {{output}};

const _abi = {{abiJsonString}}

const _bin = '{{hexlifiedBinString}}'

export class {{capitalizedName}}__factory {

  static readonly abi = _abi
  static readonly bin = _bin

  static createInstance(wallet: Account) {

    const { abi, bin } = {{capitalizedName}}__factory

    const script = new Script<
      {{capitalizedName}}Inputs,
      {{capitalizedName}}Output
    >(bin, abi, wallet);

    return script;

  }

}
`;function Gt(s){let{abi:t}=s,{types:e}=t,{rawContents:r,name:i,hexlifiedBinContents:o}=s.abi,n=JSON.stringify(r,null,2),a=t.functions.find(b=>b.name==="main");if(!a)throw new Error("ABI doesn't have a 'main()' method.");let{enums:u}=z({types:e}),{structs:y}=k({types:e}),{imports:l}=B({types:e,baseMembers:["Script","Account"]}),{prefixedInputs:T,output:d}=a.attributes;return x({template:Lt,data:{inputs:T,output:d,structs:y,enums:u,abiJsonString:n,hexlifiedBinString:o,capitalizedName:i,imports:l}})}function Ot(s){let{abis:t,outputDir:e}=s,r=[],i=t.find(n=>n.commonTypesInUse.length>0);t.forEach(n=>{let{name:a}=n,y={path:`${e}/factories/${a}__factory.ts`,contents:Gt({abi:n})};r.push(y)});let o={path:`${e}/index.ts`,contents:V({abis:t})};if(r.push(o),i){let a={path:Wt(e,"common.d.ts"),contents:D()};r.push(a)}return r}import Zt from"lodash.upperfirst";function Z(s){let{abiFilepath:t,binFilepath:e,binExists:r,programType:i}=s,o=i==="script";if(!r&&o)throw new Error([`Could not find BIN file for counterpart ${Zt(i)} ABI.`,`  - ABI: ${t}`,`  - BIN: ${e}`,i].join(`
`))}var tt=class{abis;abiFiles;binFiles;outputDir;files;constructor(t){let{abiFiles:e,binFiles:r,outputDir:i,programType:o}=t;this.outputDir=i,this.abiFiles=e,this.binFiles=r,this.abis=this.abiFiles.map(n=>{let a=n.path.replace("-abi.json",".bin"),u=this.binFiles.find(({path:l})=>l===a);return u||Z({abiFilepath:n.path,binExists:!!u,binFilepath:a,programType:o}),new W({filepath:n.path,rawContents:JSON.parse(n.contents),hexlifiedBinContents:u==null?void 0:u.contents,outputDir:i,programType:o})}),this.files=this.getAssembledFiles({programType:o})}getAssembledFiles(t){let{abis:e,outputDir:r}=this,{programType:i}=t;switch(i){case"contract":return Nt({abis:e,outputDir:r});case"script":return Ot({abis:e,outputDir:r});case"predicate":return $t({abis:e,outputDir:r});default:throw new Error(`Invalid Typegen programType: ${i}`)}}};function Tn(s){let{cwd:t,inputs:e,output:r,silent:i,programType:o,filepaths:n}=s,a=se(t),{log:u}=console;i&&(u=()=>({}));let y=[];if(!(n!=null&&n.length)&&(e==null?void 0:e.length))y=e.flatMap(b=>ie(b,{cwd:t}));else if(n!=null&&n.length)y=n;else throw new Error("You need to inform at least one parameter: `input` or `filepaths`");let l=y.map(b=>({path:b,contents:Mt(b,"utf-8")})),d=o==="script"?y.map(b=>{let E=b.replace("-abi.json",".bin"),Pt=ee(E);return Z({abiFilepath:b,binFilepath:E,binExists:Pt,programType:o}),{path:E,contents:te(Mt(E))}}):[],f=new tt({outputDir:r,abiFiles:l,binFiles:d,programType:o});u(`Generating files..
`),ne.sync(`${r}/factories`),f.files.forEach(b=>{oe.sync(b.path),re(b.path,b.contents);let E=new RegExp(`^.+${a}/`,"m");u(` - ${b.path.replace(E,"")}`)}),u(`
Done.\u26A1`)}export{Tn as runTypegen};
//# sourceMappingURL=runTypegen.mjs.map