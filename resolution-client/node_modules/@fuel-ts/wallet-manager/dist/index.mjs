var N=Object.defineProperty;var R=(r,e,t)=>e in r?N(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var l=(r,e,t)=>(R(r,typeof e!="symbol"?e+"":e,t),t),k=(r,e,t)=>{if(!e.has(r))throw TypeError("Cannot "+t)};var a=(r,e,t)=>(k(r,e,"read from private field"),t?t.call(r):e.get(r)),u=(r,e,t)=>{if(e.has(r))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(r):e.set(r,t)},o=(r,e,t,s)=>(k(r,e,"write to private field"),s?s.call(r,t):e.set(r,t),t);var O=(r,e,t)=>(k(r,e,"access private method"),t);import{encrypt as C,decrypt as D}from"@fuel-ts/keystore";import{EventEmitter as q}from"events";var P=class{storage=new Map;async getItem(e){return await this.storage.get(e)}async setItem(e,t){await this.storage.set(e,t)}async removeItem(e){await this.storage.delete(e)}async clear(){await this.storage.clear()}},E=P;import{Mnemonic as U}from"@fuel-ts/mnemonic";import{Wallet as V}from"@fuel-ts/wallet";var y,w=class{constructor(e){u(this,y,void 0);l(this,"pathKey","{}");l(this,"rootPath",`m/44'/1179993420'/${this.pathKey}'/0/0`);l(this,"numberOfAccounts",0);o(this,y,e.secret||U.generate()),this.rootPath=e.rootPath||this.rootPath,this.numberOfAccounts=e.numberOfAccounts||1}getDerivePath(e){return this.rootPath.includes(this.pathKey)?this.rootPath.replace(this.pathKey,String(e)):`${this.rootPath}/${e}`}serialize(){return{secret:a(this,y),rootPath:this.rootPath,numberOfAccounts:this.numberOfAccounts}}getAccounts(){let e=[],t=0;do{let s=V.fromMnemonic(a(this,y),this.getDerivePath(t));e.push({publicKey:s.publicKey,address:s.address}),t+=1}while(t<this.numberOfAccounts);return e}addAccount(){this.numberOfAccounts+=1;let e=V.fromMnemonic(a(this,y),this.getDerivePath(this.numberOfAccounts-1));return{publicKey:e.publicKey,address:e.address}}exportAccount(e){let t=0;do{let s=V.fromMnemonic(a(this,y),this.getDerivePath(t));if(s.address.equals(e))return s.privateKey;t+=1}while(t<this.numberOfAccounts);throw new Error("Account not found")}getWallet(e){let t=this.exportAccount(e);return V.fromPrivateKey(t)}};y=new WeakMap,l(w,"type","mnemonic");import{Wallet as v}from"@fuel-ts/wallet";var p,b=class{constructor(e){u(this,p,[]);e.secret?o(this,p,[e.secret]):o(this,p,e.accounts||[v.generate().privateKey])}serialize(){return{accounts:a(this,p)}}getPublicAccount(e){let t=v.fromPrivateKey(e);return{address:t.address,publicKey:t.publicKey}}getAccounts(){return a(this,p).map(this.getPublicAccount)}addAccount(){let e=v.generate();return a(this,p).push(e.privateKey),this.getPublicAccount(e.privateKey)}exportAccount(e){let t=a(this,p).find(s=>v.fromPrivateKey(s).address.equals(e));if(!t)throw new Error("Address not found");return t}getWallet(e){let t=this.exportAccount(e);return v.fromPrivateKey(t)}};p=new WeakMap,l(b,"type","privateKey");var m={invalid_vault_type:"Invalid VaultType",address_not_found:"Address not found",vault_not_found:"Vault not found",wallet_not_unlocked:"Wallet is locked",passphrase_not_match:"Passphrase didn't match"};function h(r,e){if(!r)throw new Error(e)}var i,g,c,S,M,_,I,x=class extends q{constructor(t){super();u(this,S);u(this,_);l(this,"storage",new E);l(this,"STORAGE_KEY","WalletManager");u(this,i,[]);u(this,g,"");u(this,c,!0);this.storage=(t==null?void 0:t.storage)||this.storage}get isLocked(){return a(this,c)}exportVault(t){h(!a(this,c),m.wallet_not_unlocked);let s=a(this,i).find((n,d)=>d===t);return h(s,m.vault_not_found),s.vault.serialize()}getVaults(){return a(this,i).map((t,s)=>({title:t.title,type:t.type,vaultId:s}))}getAccounts(){return a(this,i).flatMap((t,s)=>t.vault.getAccounts().map(n=>({...n,vaultId:s})))}getWallet(t){let s=a(this,i).find(n=>n.vault.getAccounts().find(d=>d.address.equals(t)));return h(s,m.address_not_found),s.vault.getWallet(t)}exportPrivateKey(t){h(!a(this,c),m.wallet_not_unlocked);let s=a(this,i).find(n=>n.vault.getAccounts().find(d=>d.address.equals(t)));return h(s,m.address_not_found),s.vault.exportAccount(t)}async addAccount(t){await this.loadState();let s=a(this,i)[(t==null?void 0:t.vaultId)||0];await h(s,m.vault_not_found);let n=s.vault.addAccount();return await this.saveState(),n}async removeVault(t){a(this,i).splice(t,1),await this.saveState()}async addVault(t){await this.loadState();let s=this.getVaultClass(t.type),n=new s(t);o(this,i,a(this,i).concat({title:t.title,type:t.type,vault:n})),await this.saveState()}async lock(){o(this,c,!0),o(this,i,[]),o(this,g,""),await this.emit("lock")}async unlock(t){o(this,g,t),o(this,c,!1);try{await this.loadState(),this.emit("unlock")}catch(s){throw await this.lock(),s}}async updatePassphrase(t,s){let n=a(this,c);await this.unlock(t),o(this,g,s),await this.saveState(),await this.loadState(),n&&await this.lock()}async loadState(){await h(!a(this,c),m.wallet_not_unlocked);let t=await this.storage.getItem(this.STORAGE_KEY);if(t){let s=await D(a(this,g),JSON.parse(t));o(this,i,O(this,_,I).call(this,s.vaults))}}async saveState(){await h(!a(this,c),m.wallet_not_unlocked);let t=await C(a(this,g),{vaults:O(this,S,M).call(this,a(this,i))});await this.storage.setItem(this.STORAGE_KEY,JSON.stringify(t)),this.emit("update")}getVaultClass(t){let s=x.Vaults.find(n=>n.type===t);return h(s,m.invalid_vault_type),s}},K=x;i=new WeakMap,g=new WeakMap,c=new WeakMap,S=new WeakSet,M=function(t){return t.map(({title:s,type:n,vault:d})=>({title:s,type:n,data:d.serialize()}))},_=new WeakSet,I=function(t){return t.map(({title:s,type:n,data:d})=>{let z=this.getVaultClass(n);return{title:s,type:n,vault:new z(d)}})},l(K,"Vaults",[w,b]);var W=class{constructor(e){throw new Error("Not implemented")}serialize(){throw new Error("Not implemented")}getAccounts(){throw new Error("Not implemented")}addAccount(){throw new Error("Not implemented")}exportAccount(e){throw new Error("Not implemented")}getWallet(e){throw new Error("Not implemented")}};l(W,"type");var T=class{};export{T as StorageAbstract,W as Vault,K as WalletManager};
//# sourceMappingURL=index.mjs.map