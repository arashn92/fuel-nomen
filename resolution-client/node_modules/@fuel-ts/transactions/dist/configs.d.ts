import * as _fuel_ts_math from '@fuel-ts/math';

/** Maximum contract size, in bytes. */
declare const CONTRACT_MAX_SIZE: number;
/** Maximum number of witnesses. */
declare const MAX_WITNESSES = 16;
/** Maximum gas per transaction. */
declare const MAX_GAS_PER_TX: _fuel_ts_math.BN;
/**
 * Gas Price factor this is used to calculate
 * This is used to calculate the gas fee in Native Coins.
 * Ex.: transactionFee = Math.ceil(<gasUsed> / MAX_GAS_PER_TX);
 */
declare const GAS_PRICE_FACTOR: _fuel_ts_math.BN;
/** Gas charged per byte of the transaction. */
declare const GAS_PER_BYTE: _fuel_ts_math.BN;
/** Maximum length of script, in instructions. */
declare const MAX_SCRIPT_LENGTH: number;
/** Maximum length of script data, in bytes. */
declare const MAX_SCRIPT_DATA_LENGTH: number;
/** Maximum number of static contracts. */
declare const MAX_STATIC_CONTRACTS = 255;
/** Maximum length of predicate, in instructions. */
declare const MAX_PREDICATE_LENGTH: number;
/** Maximum length of predicate data, in bytes. */
declare const MAX_PREDICATE_DATA_LENGTH: number;
declare const FAILED_REQUIRE_SIGNAL = "0xffffffffffff0000";
declare const FAILED_TRANSFER_TO_ADDRESS_SIGNAL = "0xffffffffffff0001";
declare const FAILED_SEND_MESSAGE_SIGNAL = "0xffffffffffff0002";
declare const FAILED_ASSERT_EQ_SIGNAL = "0xffffffffffff0003";
declare const FAILED_ASSERT_SIGNAL = "0xffffffffffff0004";
declare const FAILED_UNKNOWN_SIGNAL = "0x0";

export { CONTRACT_MAX_SIZE, FAILED_ASSERT_EQ_SIGNAL, FAILED_ASSERT_SIGNAL, FAILED_REQUIRE_SIGNAL, FAILED_SEND_MESSAGE_SIGNAL, FAILED_TRANSFER_TO_ADDRESS_SIGNAL, FAILED_UNKNOWN_SIGNAL, GAS_PER_BYTE, GAS_PRICE_FACTOR, MAX_GAS_PER_TX, MAX_PREDICATE_DATA_LENGTH, MAX_PREDICATE_LENGTH, MAX_SCRIPT_DATA_LENGTH, MAX_SCRIPT_LENGTH, MAX_STATIC_CONTRACTS, MAX_WITNESSES };
