{"version":3,"sources":["../src/configs.ts"],"sourcesContent":["import { bn } from '@fuel-ts/math';\n\n/** Maximum contract size, in bytes. */\nexport const CONTRACT_MAX_SIZE = 16 * 1024;\n\n/** Maximum number of witnesses. */\nexport const MAX_WITNESSES = 16;\n\n/** Maximum gas per transaction. */\nexport const MAX_GAS_PER_TX = bn(100000000);\n\n/**\n * Gas Price factor this is used to calculate\n * This is used to calculate the gas fee in Native Coins.\n * Ex.: transactionFee = Math.ceil(<gasUsed> / MAX_GAS_PER_TX);\n */\nexport const GAS_PRICE_FACTOR = bn(1000000000);\n\n/** Gas charged per byte of the transaction. */\nexport const GAS_PER_BYTE = bn(4);\n\n// TODO: set max script length const\n/** Maximum length of script, in instructions. */\nexport const MAX_SCRIPT_LENGTH = 1024 * 1024 * 1024;\n\n// TODO: set max script length const\n/** Maximum length of script data, in bytes. */\nexport const MAX_SCRIPT_DATA_LENGTH = 1024 * 1024 * 1024;\n\n/** Maximum number of static contracts. */\nexport const MAX_STATIC_CONTRACTS = 255;\n\n// TODO: set max predicate length value\n/** Maximum length of predicate, in instructions. */\nexport const MAX_PREDICATE_LENGTH = 1024 * 1024;\n\n// TODO: set max predicate data length value\n/** Maximum length of predicate data, in bytes. */\nexport const MAX_PREDICATE_DATA_LENGTH = 1024 * 1024;\n\n// Revert with this value for a failing call to `std::revert::require`.\nexport const FAILED_REQUIRE_SIGNAL = '0xffffffffffff0000';\n\n// Revert with this value for a failing call to `std::token::transfer_to_address`.\nexport const FAILED_TRANSFER_TO_ADDRESS_SIGNAL = '0xffffffffffff0001';\n\n// Revert with this value for a failing call to `std::message::send_message`.\nexport const FAILED_SEND_MESSAGE_SIGNAL = '0xffffffffffff0002';\n\n// Revert with this value for a failing call to `std::assert::assert_eq`.\nexport const FAILED_ASSERT_EQ_SIGNAL = '0xffffffffffff0003';\n\n// Revert with this value for a failing call to `std::assert::assert`.\nexport const FAILED_ASSERT_SIGNAL = '0xffffffffffff0004';\n\nexport const FAILED_UNKNOWN_SIGNAL = '0x0';\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,uBAAAE,EAAA,4BAAAC,EAAA,yBAAAC,EAAA,0BAAAC,EAAA,+BAAAC,EAAA,sCAAAC,EAAA,0BAAAC,EAAA,iBAAAC,EAAA,qBAAAC,EAAA,mBAAAC,EAAA,8BAAAC,EAAA,yBAAAC,EAAA,2BAAAC,EAAA,sBAAAC,EAAA,yBAAAC,EAAA,kBAAAC,IAAA,eAAAC,EAAAlB,GAAA,IAAAmB,EAAmB,yBAGNC,EAAoB,GAAK,KAGzBC,EAAgB,GAGhBC,KAAiB,MAAG,GAAS,EAO7BC,KAAmB,MAAG,GAAU,EAGhCC,KAAe,MAAG,CAAC,EAInBC,EAAoB,KAAO,KAAO,KAIlCC,EAAyB,KAAO,KAAO,KAGvCC,EAAuB,IAIvBC,EAAuB,KAAO,KAI9BC,EAA4B,KAAO,KAGnCC,EAAwB,qBAGxBC,EAAoC,qBAGpCC,EAA6B,qBAG7BC,EAA0B,qBAG1BC,EAAuB,qBAEvBC,EAAwB","names":["configs_exports","__export","CONTRACT_MAX_SIZE","FAILED_ASSERT_EQ_SIGNAL","FAILED_ASSERT_SIGNAL","FAILED_REQUIRE_SIGNAL","FAILED_SEND_MESSAGE_SIGNAL","FAILED_TRANSFER_TO_ADDRESS_SIGNAL","FAILED_UNKNOWN_SIGNAL","GAS_PER_BYTE","GAS_PRICE_FACTOR","MAX_GAS_PER_TX","MAX_PREDICATE_DATA_LENGTH","MAX_PREDICATE_LENGTH","MAX_SCRIPT_DATA_LENGTH","MAX_SCRIPT_LENGTH","MAX_STATIC_CONTRACTS","MAX_WITNESSES","__toCommonJS","import_math","CONTRACT_MAX_SIZE","MAX_WITNESSES","MAX_GAS_PER_TX","GAS_PRICE_FACTOR","GAS_PER_BYTE","MAX_SCRIPT_LENGTH","MAX_SCRIPT_DATA_LENGTH","MAX_STATIC_CONTRACTS","MAX_PREDICATE_LENGTH","MAX_PREDICATE_DATA_LENGTH","FAILED_REQUIRE_SIGNAL","FAILED_TRANSFER_TO_ADDRESS_SIGNAL","FAILED_SEND_MESSAGE_SIGNAL","FAILED_ASSERT_EQ_SIGNAL","FAILED_ASSERT_SIGNAL","FAILED_UNKNOWN_SIGNAL"]}