import{hexlify as d,arrayify as h}from"@ethersproject/bytes";import{Logger as l}from"@ethersproject/logger";import{AbiCoder as A,Interface as T}from"@fuel-ts/abi-coder";import{Address as R}from"@fuel-ts/address";import{transactionRequestify as g}from"@fuel-ts/providers";import{InputType as b}from"@fuel-ts/transactions";import{versions as k}from"@fuel-ts/versions";import{Account as L}from"@fuel-ts/wallet";import{hexlify as f,arrayify as u}from"@ethersproject/bytes";import{calcRoot as y}from"@fuel-ts/merkle";var c=a=>{let t=[],n=u(a);for(let e=0;e<n.length;e+=8){let o=new Uint8Array(8);o.set(n.slice(e,e+8)),t.push(o)}return y(t.map(e=>f(e)))};var x=new l(k.FUELS),p=class extends L{bytes;types;predicateData=Uint8Array.from([]);interface;constructor(r,t,n){let e=R.fromB256(c(r));if(super(e,n),this.bytes=h(r),t){this.interface=new T(t);let o=this.interface.fragments.find(({name:m})=>m==="main");o!==void 0?this.types=o.inputs:x.throwArgumentError('Cannot use ABI without "main" function',"Function fragments",this.interface.fragments)}}populateTransactionPredicateData(r){var n;let t=g(r);return(n=t.inputs)==null||n.forEach(e=>{e.type===b.Coin&&d(e.owner)===this.address.toB256()&&(e.predicate=this.bytes,e.predicateData=this.predicateData)}),t}sendTransaction(r){let t=this.populateTransactionPredicateData(r);return super.sendTransaction(t)}simulateTransaction(r){let t=this.populateTransactionPredicateData(r);return super.simulateTransaction(t)}setData(...r){let n=new A().encode(this.types||[],r);return this.predicateData=n,this}};export{p as Predicate};
//# sourceMappingURL=index.mjs.map