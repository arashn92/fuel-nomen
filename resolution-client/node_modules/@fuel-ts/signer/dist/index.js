"use strict";var b=Object.create;var n=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,B=Object.prototype.hasOwnProperty;var K=(s,e)=>{for(var r in e)n(s,r,{get:e[r],enumerable:!0})},m=(s,e,r,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let c of g(e))!B.call(s,c)&&c!==r&&n(s,c,{get:()=>e[c],enumerable:!(i=k(e,c))||i.enumerable});return s};var x=(s,e,r)=>(r=s!=null?b(h(s)):{},m(e||!s||!s.__esModule?n(r,"default",{value:s,enumerable:!0}):r,s)),L=s=>m(n({},"__esModule",{value:!0}),s);var C={};K(C,{Signer:()=>f,getCurve:()=>o});module.exports=L(C);var t=require("@ethersproject/bytes"),l=require("@fuel-ts/address"),P=require("@fuel-ts/hasher"),u=require("@fuel-ts/keystore"),d=require("@fuel-ts/math"),F=x(require("elliptic")),{ec:A}=F;function o(){return new A("secp256k1")}var a=class{address;publicKey;compressedPublicKey;privateKey;constructor(e){typeof e=="string"&&e.match(/^[0-9a-f]*$/i)&&e.length===64&&(e=`0x${e}`);let r=(0,t.arrayify)(e),i=o().keyFromPrivate(r,"hex");this.compressedPublicKey=(0,t.hexlify)(i.getPublic(!0,"array")),this.publicKey=(0,t.hexlify)(i.getPublic(!1,"array").slice(1)),this.privateKey=(0,t.hexlify)(r),this.address=l.Address.fromPublicKey(this.publicKey)}sign(e){let i=o().keyFromPrivate((0,t.arrayify)(this.privateKey),"hex").sign((0,t.arrayify)(e),{canonical:!0}),c=(0,d.toBytes)(i.r,32),y=(0,d.toBytes)(i.s,32);return y[0]|=(i.recoveryParam||0)<<7,(0,t.hexlify)((0,t.concat)([c,y]))}addPoint(e){let r=o().keyFromPublic((0,t.arrayify)(this.compressedPublicKey)),i=o().keyFromPublic((0,t.arrayify)(e)),c=r.getPublic().add(i.getPublic());return(0,t.hexlify)(c.encode("array",!0))}static recoverPublicKey(e,r){let i=(0,t.arrayify)(r),c=i.slice(0,32),y=i.slice(32,64),p=(y[0]&128)>>7;return y[0]&=127,o().recoverPubKey((0,t.arrayify)(e),{r:c,s:y},p).encode("array",!1).slice(1)}static recoverAddress(e,r){return l.Address.fromPublicKey(a.recoverPublicKey(e,r))}static generatePrivateKey(e){return e?(0,P.hash)((0,t.concat)([(0,u.randomBytes)(32),(0,t.arrayify)(e)])):(0,u.randomBytes)(32)}static extendPublicKey(e){let r=o().keyFromPublic((0,t.arrayify)(e));return(0,t.hexlify)(r.getPublic(!1,"array").slice(1))}},f=a;0&&(module.exports={Signer,getCurve});
//# sourceMappingURL=index.js.map